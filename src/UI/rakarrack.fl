# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "../process.h"} {public local
}

decl {\#include "../global.h"} {public global
}

decl {\#include "RKR_Input.h"} {public global
}

decl {\#include "RKR_Slider.h"} {public global
}

decl {\#include "newvum.h"} {public global
}

decl {\#include "tunerbar.h"} {public global
}

decl {\#include "RKR_Box.h"} {public global
}

decl {\#include "RKR_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Menu_Bar.h"} {public global
}

decl {\#include <FL/Fl_Value_Slider.H>} {public local
}

decl {\#include <FL/Fl_Scroll.H>} {public local
}

decl {\#include <FL/Fl_Progress.H>} {public local
}

decl {\#include <FL/Fl_Tooltip.H>} {public local
}

decl {\#include <FL/x.H>} {public local
}

decl {\#include <FL/Fl_PNG_Image.H>} {public local
}

decl {\#include <FL/Fl_Tiled_Image.H>} {public local
}

decl {\#include <FL/Fl_Help_Dialog.H>} {public local
}

decl {\#include <FL/Fl_File_Chooser.H>} {public global
}

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
}

decl {\#include <X11/xpm.h>} {public global
}

decl {/* All the sub menu paths for resizing */
const std::vector<std::string> main_submenu_paths
{
    /* Main Window - From RKRGUI::menu_MenuP[] */
    "&File/New",
    "&File/Load Preset",
    "&File/Save Preset",
    "&File/Load &Bank",
    "&File/Save B&ank",
    "&File/Load S&kin",
    "&File/Save Sk&in",
    "&File/Load MIDI Table",
    "&File/Save MIDI Table",
    "&File/&Convert Reverb IR File",
    "&File/Import Internal Presets",
    "&File/Exit",
    "&File/Delay File",
    "&Settings/Preferences",
    "&Settings/MIDI Learn",
    "&Settings/ACI",
    "&Settings/Fullscreen",
    "&Help/Help Contents",
    "&Help/About...",
};} {selected private global
}

decl {class RKR;  // forward declaration} {public global
}

decl {class Scope;  // forward declaration} {public global
}

decl {class NewVum;  // forward declaration} {public global
}

decl {class Analyzer;  // forward declaration} {public global
}

decl {class TunerBar;  // forward declaration} {public global
}

decl {class EqGui; // forward declaration} {public global
}

decl {class CompressGui; // forward declaration} {public global
}

decl {class DistGui; // forward declaration} {public global
}

decl {class OvrdGui; // forward declaration} {public global
}

decl {class EchoGui; // forward declaration} {public global
}

decl {class ChorusGui; // forward declaration} {public global
}

decl {class PhaserGui; // forward declaration} {public global
}

decl {class FlangerGui; // forward declaration} {public global
}

decl {class ReverbGui; // forward declaration} {public global
}

decl {class PeqGui; // forward declaration} {public global
}

decl {class WhawhaGui; // forward declaration} {public global
}

decl {class AlienwahGui; // forward declaration} {public global
}

decl {class CabinetGui; // forward declaration} {public global
}

decl {class PanGui; // forward declaration} {public global
}

decl {class HarGui; // forward declaration} {public global
}

decl {class MusdelayGui; // forward declaration} {public global
}

decl {class GateGui; // forward declaration} {public global
}

decl {class DerelictGui; // forward declaration} {public global
}

decl {class AphaserGui; // forward declaration} {public global
}

decl {class ValveGui; // forward declaration} {public global
}

decl {class DflangeGui; // forward declaration} {public global
}

decl {class RingGui; // forward declaration} {public global
}

decl {class ExciterGui; // forward declaration} {public global
}

decl {class DistBandGui; // forward declaration} {public global
}

decl {class ArpieGui; // forward declaration} {public global
}

decl {class ExpanderGui; // forward declaration} {public global
}

decl {class ShuffleGui; // forward declaration} {public global
}

decl {class SynthfilterGui; // forward declaration} {public global
}

decl {class VarybandGui; // forward declaration} {public global
}

decl {class ConvoGui; // forward declaration} {public global
}

decl {class LooperGui; // forward declaration} {public global
}

decl {class MutromojoGui; // forward declaration} {public global
}

decl {class EchoverseGui; // forward declaration} {public global
}

decl {class CoilGui; // forward declaration} {public global
}

decl {class ShelfGui; // forward declaration} {public global
}

decl {class VocoderGui; // forward declaration} {public global
}

decl {class SustainGui; // forward declaration} {public global
}

decl {class SequenceGui; // forward declaration} {public global
}

decl {class ShifterGui; // forward declaration} {public global
}

decl {class StompboxGui; // forward declaration} {public global
}

decl {class RevtronGui; // forward declaration} {public global
}

decl {class EchotronGui; // forward declaration} {public global
}

decl {class SharGui; // forward declaration} {public global
}

decl {class CbandGui; // forward declaration} {public global
}

decl {class OtremGui; // forward declaration} {public global
}

decl {class VibeGui; // forward declaration} {public global
}

decl {class InfinityGui; // forward declaration} {public global
}

decl {class MidiGui; // forward declaration} {public global
}

decl {class BankWindowGui; // forward declaration} {public global
}

decl {class OrderWindowGui; // forward declaration} {public global
}

decl {class SettingsWindowGui; // forward declaration} {public global
}

decl {class MidiLearnWindowGui; // forward declaration} {public global
}

decl {class AboutWindowGui; // forward declaration} {public global
}

decl {class TrigWindowGui; // forward declaration} {public global
}

decl {Fl_Tiled_Image *back;} {private global
}

decl {Fl_Color leds_color;} {private global
}

decl {Fl_Color back_color;} {private global
}

decl {Fl_Color fore_color;} {private global
}

decl {Fl_Color label_color;} {private global
}

decl {RKR *rkr; // extern global} {private global
}

decl {int global_font_size = C_DEFAULT_FONT_SIZE;  // extern global} {private global
}

class RKRGUI {open
} {
  decl {CommonGuiMenu *m_looper_bar;} {private local
  }
  decl {CommonGuiMenu *m_looper_ms;} {private local
  }
  decl {int made;} {private local
  }
  decl {Fl_Help_Dialog *visor;} {private local
  }
  decl {struct list_element *mBankNameList;} {private local
  }
  decl {struct list_element *mBankNameListTail;} {private local
  }
  Function {make_window()} {open return_type void
  } {
    Fl_Window Principal {
      callback {is_modified();
save_stat(0);

Pexitprogram=1;} open
      xywh {165 401 800 600} type Double box DOWN_BOX color 0 resizable size_range {320 240 3200 2400} visible
    } {
      Fl_Box fondo {
        xywh {1 1 800 600} align 112
      }
      Fl_Menu_Bar MenuP {open
        xywh {2 2 518 18} box NO_BOX color 178 selection_color 7 labelcolor 7 align 112 textcolor 7
        code0 {o->set_label_offset(4);}
        code1 {o->set_submenu_paths(main_submenu_paths);}
        class RKR_Menu_Bar
      } {
        Submenu Archivo {
          label {&File}
          xywh {0 0 100 20} labelcolor 7
        } {
          MenuItem Menu_New {
            label New
            callback {S_new->do_callback();}
            xywh {0 0 45 26} shortcut 0x6e divider
          }
          MenuItem Load_Preset {
            label {Load Preset}
            callback {L_preset->do_callback();}
            xywh {0 0 45 26} shortcut 0x6c
          }
          MenuItem Save_Preset {
            label {Save Preset}
            callback {S_preset->do_callback();}
            xywh {0 0 45 26} shortcut 0x73 divider
          }
          MenuItem {BankWindow->Load_Bank_M} {
            label {Load &Bank}
            callback {get_bank_file();}
            xywh {0 0 45 26}
          }
          MenuItem {BankWindow->Save_Bank_M} {
            label {Save B&ank}
            callback {set_save_file();}
            xywh {0 0 45 26} divider
          }
          MenuItem Load_Skin {
            label {Load S&kin}
            callback {char *filename;
filename = fl_file_chooser("Load Skin:","(*.rkrs)",NULL,0);
if (filename == NULL) return;
filename = fl_filename_setext(filename,".rkrs");

if(rkr->loadskin(filename))
{
    Put_Skin();
}}
            xywh {0 0 36 21}
          }
          MenuItem Save_Skin {
            label {Save Sk&in}
            callback {char *filename;
\#define EXT ".rkrs"
filename=fl_file_chooser("Save Skin:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT

rkr->slabel_color = (int) label_color;
rkr->sback_color = (int) back_color;
rkr->sfore_color = (int) fore_color;
rkr->sleds_color = (int) leds_color;
rkr->swidth = (int) Principal->w();
rkr->sheight = (int) Principal->h();
rkr->sschema = Settings->scheme_ch->value();


rkr->saveskin(filename);}
            xywh {0 0 36 21} divider
          }
          MenuItem Load_MTable {
            label {Load MIDI Table}
            callback {Load_Midi_Program_Change_Table();}
            xywh {10 10 36 21}
          }
          MenuItem Save_MTable {
            label {Save MIDI Table}
            callback {Save_Midi_Program_Change_Table();}
            xywh {10 10 36 21} divider
          }
          MenuItem ConvertReverb {
            label {&Convert Reverb IR File}
            callback {char *filename;
char name[70];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Reverb IR File:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
rkr->ConvertReverbFile(filename);
rkr->Message(1,name, "Please, now use Reverbtron to load the new '.rvb' file");}
            xywh {0 0 36 21} divider
          }
          MenuItem ImportPresets {
            label {Import Internal Presets}
            callback {char *filename;
  
filename = fl_file_chooser("Import Internal Presets:","(*)",NULL,0);

if (filename == NULL) return;

if(rkr->MergeIntPreset(filename))
{
    Show_Next_Time();
}}
            xywh {0 0 36 21} divider
          }
          MenuItem salir {
            label Exit
            callback {Principal->do_callback();}
            xywh {2 2 36 21} shortcut 0x78 labelcolor 7
          }
          MenuItem Delay_File {
            label {Delay File}
            callback {if(!DelayFile->visible())
{
DelayFile->show();
put_icon(DelayFile);
}
else
DelayFile->hide();}
            xywh {0 0 36 21}
          }
        }
        MenuItem Bank_Menu {
          label {&Bank}
          callback {B_preset->do_callback();}
          xywh {0 0 45 26} shortcut 0x62
        }
        Submenu {} {
          label {&Settings}
          xywh {0 0 70 21}
        } {
          MenuItem Ajustes {
            label Preferences
            callback {if(!Settings->visible())
{
MiraClientes();
MiraConfig();
Settings->show();
put_icon(Settings);
}
else
Settings->hide();}
            xywh {10 10 45 26} shortcut 0x69 labelcolor 7 divider
          }
          MenuItem ML_Menu {
            label {MIDI Learn}
            callback {if(!MIDILearn->visible())
{
rkr->comemouse=0;
PrepareML();
}
else
MIDILearn->hide();}
            xywh {0 0 36 21} shortcut 0x65 labelcolor 7 divider
          }
          MenuItem ACI_Menu {
            label ACI
            callback {if(!Trigger->visible())
{
Trigger->show();
rkr->ACI_Bypass = 1;
put_icon(Trigger);
rkr->old_a_sum = 0.0;
rkr->val_a_sum = 0.0;
}
else
{
Trigger->hide();
rkr->ACI_Bypass = 0;
}}
            xywh {0 0 36 21} shortcut 0x61 divider
          }
          MenuItem {} {
            label Fullscreen
            callback {if(Principal->fullscreen_active())
    Principal->fullscreen_off();
  else
    Principal->fullscreen();}
            xywh {0 0 36 21} shortcut 0xffc9
          }
        }
        Submenu Ayuda {
          label {&Help}
          xywh {0 0 100 20} labelcolor 7
        } {
          MenuItem Contenido {
            label {Help Contents}
            callback {show_help();}
            xywh {0 0 100 20} shortcut 0xffbe labelcolor 7 divider
          }
          MenuItem Acerca_de {
            label {About...}
            callback {int x,y;

x = Principal->x()+((Principal->w()-420)/2);
y = Principal->y()+((Principal->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);}
            xywh {0 0 100 20} labelcolor 7
          }
        }
      }
      Fl_Button TITTLE_L {
        callback {Tuner->hide();
Sco->show();
Sco->set_scope_ON(true);
Fl::focus(Open_Order);}
        tooltip {Click here to activate scope} xywh {521 2 276 21} type Toggle box NO_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 40 align 17
      }
      Fl_Box LMT_LED {
        label Lmt
        xywh {504 8 8 8} box DOWN_BOX color 2 labelsize 10 labelcolor 7 align 4
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box CLIP_LED {
        label Clip
        xywh {541 8 8 8} box DOWN_BOX color 1 labelsize 10 labelcolor 7 align 4
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box UPS_LED {
        label Resample
        xywh {608 8 8 8} box DOWN_BOX color 2 labelsize 10 labelcolor 7 align 4
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box P_MIN_ST {
        label {Midi In}
        user_data BOX_LED_DATA
        xywh {620 3 29 20} labelfont 1 labelsize 8 labelcolor 7 align 128 hide
        code0 {o->set_label_offset(-2);}
        class RKR_Box
      }
      Fl_Box P_MOUT_ST {
        label {Midi Out}
        user_data BOX_LED_DATA
        xywh {648 3 29 20} labelfont 1 labelsize 8 labelcolor 7 align 128 hide
        code0 {o->set_label_offset(-2);}
        class RKR_Box
      }
      Fl_Box P_AUX_ST {
        label Aux
        user_data BOX_LED_DATA
        xywh {676 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box P_IN_ST {
        label In
        user_data BOX_LED_DATA
        xywh {698 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box P_OUT_ST {
        label Out
        user_data BOX_LED_DATA
        xywh {719 5 32 17} labelfont 1 labelsize 10 labelcolor 7 hide
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box CPULOAD {
        user_data BOX_LED_DATA
        xywh {750 5 45 17} labelsize 10 labelcolor 7
        code0 {o->set_label_offset(0);}
        class RKR_Box
      }
      Fl_Box Sco {
        label Rakarrack
        tooltip {Click here to turn off scope} xywh {545 25 226 59} labeltype EMBOSSED_LABEL labelfont 1 labelsize 40 labelcolor 7 align 80 hide
        code0 {\#include "scope.h"}
        class Scope
      }
      Fl_Box E1 {
        xywh {2 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E2 {
        xywh {162 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E3 {
        xywh {322 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E4 {
        xywh {482 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E5 {
        xywh {642 212 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E6 {
        xywh {2 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E7 {
        xywh {162 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E8 {
        xywh {322 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E9 {
        xywh {483 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box E10 {
        xywh {642 413 1 1} labelsize 18 hide deactivate
      }
      Fl_Box L1 {
        label label
        user_data 770
        xywh {2 195 158 17} labelfont 1 labelcolor 7 align 64
        class RKR_Box
      }
      Fl_Box L2 {
        label label
        user_data 771
        xywh {162 195 158 17} labelfont 1 labelcolor 7 align 64
        class RKR_Box
      }
      Fl_Box L3 {
        label label
        user_data 772
        xywh {322 195 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L4 {
        label label
        user_data 773
        xywh {482 195 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L5 {
        label label
        user_data 774
        xywh {642 195 157 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L6 {
        label label
        user_data 775
        xywh {1 396 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L7 {
        label label
        user_data 776
        xywh {162 396 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L8 {
        label label
        user_data 777
        xywh {322 396 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L9 {
        label label
        user_data 778
        xywh {482 396 158 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Box L10 {
        label label
        user_data 779
        xywh {642 396 154 17} labelfont 1 labelcolor 7
        class RKR_Box
      }
      Fl_Group EQ {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "eq_gui.h"}
        class EqGui
      } {}
      Fl_Group COMPRESS {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "compress_gui.h"}
        class CompressGui
      } {}
      Fl_Group DIST {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "dist_gui.h"}
        class DistGui
      } {}
      Fl_Group OVRD {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "ovrd_gui.h"}
        class OvrdGui
      } {}
      Fl_Group ECHO {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "echo_gui.h"}
        class EchoGui
      } {}
      Fl_Group CHORUS {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "chorus_gui.h"}
        class ChorusGui
      } {}
      Fl_Group PHASER {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "phaser_gui.h"}
        class PhaserGui
      } {}
      Fl_Group FLANGER {
        user_data 1
        xywh {321 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "flanger_gui.h"}
        class FlangerGui
      } {}
      Fl_Group REVERB {
        user_data 1
        xywh {480 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "reverb_gui.h"}
        class ReverbGui
      } {}
      Fl_Group PEQ {
        user_data 1
        xywh {639 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "peq_gui.h"}
        class PeqGui
      } {}
      Fl_Group WHAWHA {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "whawha_gui.h"}
        class WhawhaGui
      } {}
      Fl_Group ALIENWAH {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "alienwah_gui.h"}
        class AlienwahGui
      } {}
      Fl_Group CABINET {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "cabinet_gui.h"}
        class CabinetGui
      } {}
      Fl_Group PAN {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "pan_gui.h"}
        class PanGui
      } {}
      Fl_Group HAR {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "har_gui.h"}
        class HarGui
      } {}
      Fl_Group MUSDELAY {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "musdelay_gui.h"}
        class MusdelayGui
      } {}
      Fl_Group GATE {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "gate_gui.h"}
        class GateGui
      } {}
      Fl_Group DERELICT {
        user_data 1
        xywh {321 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "derelict_gui.h"}
        class DerelictGui
      } {}
      Fl_Group APHASER {
        user_data 1
        xywh {480 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "aphaser_gui.h"}
        class AphaserGui
      } {}
      Fl_Group VALVE {
        user_data 1
        xywh {639 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "valve_gui.h"}
        class ValveGui
      } {}
      Fl_Group DFLANGE {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "dflange_gui.h"}
        class DflangeGui
      } {}
      Fl_Group RING {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "ring_gui.h"}
        class RingGui
      } {}
      Fl_Group EXCITER {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "exciter_gui.h"}
        class ExciterGui
      } {}
      Fl_Group DISTBAND {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "distband_gui.h"}
        class DistBandGui
      } {}
      Fl_Group ARPIE {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "arpie_gui.h"}
        class ArpieGui
      } {}
      Fl_Group EXPANDER {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "expander_gui.h"}
        class ExpanderGui
      } {}
      Fl_Group SHUFFLE {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "shuffle_gui.h"}
        class ShuffleGui
      } {}
      Fl_Group SYNTHFILTER {
        user_data 1
        xywh {321 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "synthfilter_gui.h"}
        class SynthfilterGui
      } {}
      Fl_Group VARYBAND {
        user_data 1
        xywh {480 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "varyband_gui.h"}
        class VarybandGui
      } {}
      Fl_Group CONVOLOTRON {
        user_data 1
        xywh {639 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "convo_gui.h"}
        class ConvoGui
      } {}
      Fl_Group LOOPER {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "looper_gui.h"}
        class LooperGui
      } {}
      Fl_Group MUTROMOJO {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "mutromojo_gui.h"}
        class MutromojoGui
      } {}
      Fl_Group ECHOVERSE {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "echoverse_gui.h"}
        class EchoverseGui
      } {}
      Fl_Group COILCRAFTER {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "coil_gui.h"}
        class CoilGui
      } {}
      Fl_Group SHELFBOOST {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "shelf_gui.h"}
        class ShelfGui
      } {}
      Fl_Group VOCODER {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "vocoder_gui.h"}
        class VocoderGui
      } {}
      Fl_Group SUSTAINER {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "sustain_gui.h"}
        class SustainGui
      } {}
      Fl_Group SEQUENCE {
        user_data 1
        xywh {321 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "sequence_gui.h"}
        class SequenceGui
      } {}
      Fl_Group SHIFTER {
        user_data 1
        xywh {480 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "shifter_gui.h"}
        class ShifterGui
      } {}
      Fl_Group STOMPBOX {
        user_data 1
        xywh {639 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "stompbox_gui.h"}
        class StompboxGui
      } {}
      Fl_Group REVERBTRON {
        user_data 1
        xywh {2 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "reverbtron_gui.h"}
        class RevtronGui
      } {}
      Fl_Group ECHOTRON {
        user_data 1
        xywh {161 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "echotron_gui.h"}
        class EchotronGui
      } {}
      Fl_Group SHAR {
        user_data 1
        xywh {320 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "stereoharm_gui.h"}
        class SharGui
      } {}
      Fl_Group COMPBAND {
        user_data 1
        xywh {480 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "compband_gui.h"}
        class CbandGui
      } {}
      Fl_Group OTREM {
        user_data 1
        xywh {639 212 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "otrem_gui.h"}
        class OtremGui
      } {}
      Fl_Group VIBE {
        user_data 1
        xywh {2 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "vibe_gui.h"}
        class VibeGui
      } {}
      Fl_Group INFINIT {
        user_data 1
        xywh {161 413 158 184} box UP_BOX color 0 selection_color 0 labelfont 1 align 112 hide
        code0 {\#include "infinity_gui.h"}
        class InfinityGui
      } {}
      Fl_Group Tuner {
        user_data 1
        xywh {520 24 276 58} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button tuner_activar {
          label On
          user_data 2
          callback {rkr->Tuner_Bypass=(int)o->value();
tuner_bar->value(-32);
WNote->copy_label("");
WRfreq->copy_label("");
WNfreq->copy_label("");
ChangeActives();
TUNER_LABEL->redraw_label();}
          tooltip {Enable Tuner - Shortcut 'T'} xywh {526 28 38 18} shortcut 0x74 color 62 selection_color 1 labelsize 10 when 1
          class RKR_Light_Button
        }
        Fl_Progress tuner_bar {
          xywh {586 31 205 14} box THIN_DOWN_BOX color 47 selection_color 88 align 80
          code0 {o->minimum(-32);}
          code1 {o->maximum(32);}
          code2 {o->value(-32);}
          class TunerBar
        }
        Fl_Box WNote {
          user_data 7
          xywh {676 57 28 22} labelfont 1 labelcolor 7 align 16
          class RKR_Box
        }
        Fl_Box WRfreq {
          user_data 7
          xywh {588 57 76 22} labelfont 1 labelcolor 7 align 16
          class RKR_Box
        }
        Fl_Box WNfreq {
          user_data 7
          xywh {714 57 76 22} labelfont 1 labelcolor 7 align 16
          class RKR_Box
        }
        Fl_Box PINCHO {
          label {@-4$8<}
          xywh {673 48 32 5} box FLAT_BOX color 55 labelcolor 4 align 16
        }
        Fl_Box TUNER_LABEL {
          label Tuner
          user_data 7
          xywh {524 63 57 14} labelfont 1 labelcolor 7
          class RKR_Box
        }
      }
      Fl_Group InOut {
        user_data 1
        xywh {2 24 164 170} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button ActivarGeneral {
          label {FX On}
          user_data 2
          callback {rkr->Bypass=o->value();
rkr->val_il_sum=-50.0;
rkr->val_ir_sum=-50.0;

rkr->val_vl_sum=-50.0;
rkr->val_vr_sum=-50.0;

rkr->old_vl_sum=-50.0;
rkr->old_vr_sum=-50.0;

rkr->old_il_sum=-50.0;
rkr->old_ir_sum=-50.0;

input_vul->value(-50.0);
input_vur->value(-50.0);

output_vul->value(-50.0);
output_vur->value(-50.0);


ChangeActives();  
LABEL_IO->redraw_label();

if (!o->value())
   {
    rkr->OnCounter = 0;
    if (rkr->Tuner_Bypass)
        {
           tuner_activar->value(0);
           tuner_activar->do_callback();
        } 
    if (rkr->MIDIConverter_Bypass)  
        {
            MIDI->midi_activar->value(0);
            MIDI->midi_activar->do_callback();
        }
             
rkr->cleanup_efx();

}}
          tooltip {Enable rakarrack - Shortcut 'R'} xywh {6 30 52 18} down_box BORDER_BOX shortcut 0x72 color 62 selection_color 1 labelsize 10 align 84 when 1
          class RKR_Light_Button
        }
        Fl_Button BostBut {
          label {+10dB}
          user_data 78
          callback {if(o->value()) rkr->booster = dB2rap(10);
else rkr->booster=1.0f;}
          tooltip {+10 dB Booster - Shortcut 'F10'} xywh {132 30 30 14} type Toggle shortcut 0xffc7 color 62 labelsize 6
          code0 {o->set_label_offset(-4);}
          class RKR_Button
        }
        Fl_Value_Slider Balance {
          label {FX%}
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(12);
 return;
} 
rkr->Fraction_Bypass=(float)(o->value()/100.0f);}
          xywh {15 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 100 maximum 0 step 1 value 100 textcolor 7
          class RKR_Slider
        }
        Fl_Value_Slider Nivel_Entrada {
          label Input
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(14);
 return;
} 
rkr->Input_Gain=(float)((o->value()+50)/100.0);
rkr->calculavol(1);}
          xywh {57 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 50 maximum -50 step 1 textcolor 7
          class RKR_Slider
        }
        Fl_Value_Slider Nivel_Salida {
          label Output
          callback {if(Fl::event_button()==3)
{
 getMIDIControl(7);
 return;
} 

rkr->Master_Volume=(float)((o->value()+50)/100.0);
rkr->calculavol(2);}
          tooltip {Shortcut 'F2' decrease volume, 'F3' Increase volume} xywh {115 48 19 126} type {Vert Knob} box FLAT_BOX color 0 selection_color 0 labelsize 10 labelcolor 31 minimum 50 maximum -50 step 1 textcolor 7
          class RKR_Slider
        }
        Fl_Slider input_vul {
          xywh {84 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider input_vur {
          xywh {93 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider output_vul {
          xywh {142 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Slider output_vur {
          xywh {151 50 8 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
          class NewVum
        }
        Fl_Box LABEL_IO {
          label {In/Out}
          user_data 7
          xywh {60 30 62 14} labelfont 1 labelcolor 7 align 16
          class RKR_Box
        }
      }
      Fl_Group MIDI {
        user_data 1
        xywh {520 85 276 52} box UP_BOX color 0 selection_color 0 align 112 hide
        code0 {\#include "midiconv_gui.h"}
        code1 {o->initialize(rkr, this);}
        class MidiGui
      } {}
      Fl_Group Metro {
        user_data 1
        xywh {520 85 276 52} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button metro_activar {
          label On
          user_data 2
          callback {if ((int)o->value()==0)
{ 
  Metro_Led->color(fl_darker(FL_RED));
  Metro_Led->redraw();
}

rkr->M_Metronome->cleanup();
rkr->Metro_Bypass=(int)o->value();


ChangeActives();
Metro_Label->redraw_label();}
          tooltip {Enable Metronome - Shortcut 'M'} xywh {525 89 38 18} shortcut 0x6d color 62 selection_color 1 labelsize 10 when 1
          class RKR_Light_Button
        }
        Fl_Choice MetroBar {
          label {Time Sig.}
          user_data 12
          callback {rkr->M_Metro_Bar=(int)o->value();

switch(rkr->M_Metro_Bar)

   {
      case 0:
      rkr->M_Metronome->set_meter(2);
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(3);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(4);
      break;                    
      case 3:
      rkr->M_Metronome->set_meter(5);
      break;                    
      case 4:
      rkr->M_Metronome->set_meter(6);
      break;                    
      case 5:
      rkr->M_Metronome->set_meter(7);
      break;                    
      case 6:
      rkr->M_Metronome->set_meter(9);
      break;                    
      case 7:
      rkr->M_Metronome->set_meter(11);
      break;                    

 }} open
          xywh {624 98 37 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(m_looper_bar->get_time_sig());}
          code1 {o->set_label_offset(-2);}
          code2 {o->set_text_offset(-2);}
          class RKR_Choice
        } {}
        Fl_Value_Slider Metro_Volume {
          label Volume
          callback {rkr->M_Metro_Vol=2.0f*(float)o->value()/100.0f;}
          xywh {667 100 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 maximum 100 step 1 value 50 textcolor 7
          code0 {o->set_label_offset(-2);}
          code1 {o->shut_off_pixel_adjustment();}
          class RKR_Slider
        }
        Fl_Choice MetroSound {
          label S
          user_data 12
          callback {rkr->M_Metro_Sound=(int)o->value();

switch(rkr->M_Metro_Sound)

   {
      case 0:
      MetroBar->do_callback();
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(1);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(0);
      break;                    
       

 }} open
          xywh {634 118 28 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(m_looper_ms->get_metronome_sound());}
          code1 {o->set_label_offset(-2);}
          code2 {o->set_text_offset(-1);}
          class RKR_Choice
        } {}
        Fl_Value_Slider Metro_Tempo {
          label Tempo
          callback {rkr->M_Metro_Tempo=(int)o->value();
rkr->M_Metronome->set_tempo(rkr->M_Metro_Tempo);}
          xywh {667 119 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 20 maximum 340 step 1 value 100 textcolor 7
          code0 {o->set_label_offset(-2);}
          code1 {o->shut_off_pixel_adjustment();}
          class RKR_Slider
        }
        Fl_Box Metro_Led {
          xywh {568 90 10 10} box ROUNDED_BOX color 88 labelsize 18
        }
        Fl_Box Metro_Label {
          label Metronome
          user_data 7
          xywh {522 117 92 14} labelfont 1 labelcolor 7 when 0
          class RKR_Box
        }
      }
      Fl_Group Presets {
        user_data 1
        xywh {168 24 352 170} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Box PRESETS_LABEL {
          label Presets
          user_data 7
          xywh {174 28 62 14} labelfont 1 labelcolor 7
          class RKR_Box
        }
        Fl_Button L_B1 {
          label 1
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Default.rkrb", DATADIR);
int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=0;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
}}
          xywh {418 30 22 16} color 62 labelsize 10
          class RKR_Button
        }
        Fl_Button L_B2 {
          label 2
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=1;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
}}
          xywh {442 30 22 16} color 62 labelsize 10
          class RKR_Button
        }
        Fl_Button L_B3 {
          label 3
          user_data 77
          callback {is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra1.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=2;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
}}
          xywh {466 30 22 16} color 62 labelsize 10
          class RKR_Button
        }
        Fl_Button L_B4 {
          label U
          user_data 77
          callback {is_modified();
int ok=rkr->loadbank(rkr->BankFilename);
if(ok) 
{
rkr->a_bank=3;
BankWin_Label(rkr->BankFilename);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
}}
          xywh {490 30 22 16} color 62 labelsize 10
          class RKR_Button
        }
        Fl_Button S_new {
          label New
          user_data 77
          callback {rkr->New();
DisAssigns();
FillML();
Prepare_Order();
Put_Loaded();}
          tooltip {New preset - Shortcut 'N'} xywh {174 50 64 18} shortcut 0x6e color 62 labelsize 12
          code0 {o->set_label_offset(2);}
          class RKR_Button
        }
        Fl_Button L_preset {
          label Load
          user_data 77
          callback {char *filename;
filename=fl_file_chooser("Load Preset:","(*.rkr)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkr");
rkr->loadfile(filename);
Put_Loaded();}
          tooltip {Open load preset window - Shortcut 'L'} xywh {240 50 64 18} shortcut 0x6c color 62 labelsize 12
          code0 {o->set_label_offset(2);}
          class RKR_Button
        }
        Fl_Button S_preset {
          label Save
          user_data 77
          callback {char *filename;
\#define EXT ".rkr"
filename=fl_file_chooser("Save Preset:","(*" EXT")",rkr->Preset_Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
rkr->savefile(filename);}
          tooltip {Open save preset window - Shortcut 'S'} xywh {306 50 64 18} shortcut 0x73 color 62 labelsize 12
          code0 {o->set_label_offset(2);}
          class RKR_Button
        }
        Fl_Light_Button Compare {
          label Compare
          user_data 7
          callback {if ((int) o->value())
{
rkr->Preset_to_Bank(0);
rkr->Bank_to_Preset((int)Preset_Counter->value());
Put_Loaded();
}

else
{
 rkr->Bank_to_Preset(0);
 Put_Loaded();
}}
          tooltip {Compare to bank preset - Shortcut 'P'} xywh {373 50 72 18} shortcut 0x70 color 62 selection_color 1 labelsize 12 align 84 when 1
          code0 {o->set_label_offset(2);}
          class RKR_Light_Button
        }
        Fl_Button B_preset {
          label Bank
          user_data 77
          callback {if(!BankWindow->visible())
{
if(!made) BankWindow->make_window_banks();
BankWindow->show();
put_icon(BankWindow);
Scan_Bank_Dir();
}
else
BankWindow->hide();}
          tooltip {Open bank window - Shortcut 'B'} xywh {448 50 64 18} shortcut 0x62 color 62 labelsize 12
          code0 {o->set_label_offset(2);}
          class RKR_Button
        }
        Fl_Input WPreset_Name {
          callback {strcpy(rkr->Preset_Name,o->value());}
          xywh {174 72 338 30} color 62 labelcolor 7 align 20 textsize 24 textcolor 7
          code0 {o->set_text_offset(14);}
          code1 {o->maximum_size(22);}
          class RKR_Input
        }
        Fl_Counter Preset_Counter {
          label Preset
          callback {rkr->new_bank_loaded=0;
BankWindow->unlight_preset(rkr->Selected_Preset);
rkr->Bank_to_Preset((int) o->value());
BankWindow->light_preset((int)o->value());
rkr->Selected_Preset=(int)o->value();
rkr->OnCounter=0;
FillML();
Prepare_Order();
Put_Loaded();
if(rkr->Tap_Updated) UpdateTGUI();}
          tooltip {Next or previous preset - Shortcut +(plus) or -(minus)} xywh {174 106 60 20} type Simple color 62 selection_color 0 labelsize 11 labelcolor 7 minimum 1 maximum 60 step 1 value 1 textsize 11
          code0 {o->set_label_offset(1);}
          code1 {o->set_text_offset(1);}
          class RKR_Counter
        }
        Fl_Box DAuthor {
          user_data 7
          xywh {246 107 266 18} box DOWN_BOX color 62 align 116
          class RKR_Box
        }
        Fl_Button RandomP {
          label Random
          user_data 77
          callback {RandomPreset();}
          tooltip {Random Preset selection - Shortcut 'F7'} xywh {175 141 59 14} shortcut 0xffc4 color 62 labelsize 10 align 80 when 6
          class RKR_Button
        }
        Fl_Button Open_Order {
          label {Put Order in your Rack}
          user_data 77
          callback {if (!Order->visible())
{
Prepare_Order();
rkr->deachide=0;
Order->Order_DeacHide->value(rkr->deachide);
Order->show();
put_icon(Order);
}
else
Order->hide();}
          tooltip {Open preset order window - Shortcut 'O'} xywh {247 132 195 24} shortcut 0x6f color 62 align 80 when 6
          code0 {o->set_label_offset(4);}
          class RKR_Button
        }
        Fl_Button Etit {
          label {Rakarrack +}
          callback {//if(rkr->Bypass)
//{
o->hide();
Analy->show();
Analy->set_analyzer_ON(true);
//}}
          tooltip {Click here to toggle analyzer ON/OFF} xywh {174 160 340 28} type Toggle box NO_BOX color 2 labeltype EMBOSSED_LABEL labelfont 1 labelsize 21 labelcolor 1 align 80
          code0 {o->set_label_offset(15);}
          class RKR_Button
        }
        Fl_Box Analy {
          tooltip {Click here to toggle analyzer ON/OFF} xywh {174 160 340 28} labeltype EMBOSSED_LABEL labelfont 1 labelsize 22 align 80 hide
          code0 {\#include "analyzer.h"}
          class Analyzer
        }
        Fl_Button HideUE {
          label Hide
          user_data 77
          callback {if(rkr->deachide)
{
 rkr->deachide=0;
 o->label("Hide");
}
else
{
rkr->deachide=1;
 o->label("Show");
}
 
reordena();}
          tooltip {Hide/Show unused Effects - Shortcut 'F9'} xywh {445 137 32 18} shortcut 0xffc6 color 62 labelsize 10 align 80 when 6
          class RKR_Button
        }
        Fl_Button SwitchMod {
          label Sw
          user_data 77
          callback {if(rkr->sw_stat==0) 
{ 
  rkr->sw_stat = 1;
  MIDI->hide();
  Metro->show();
}
else
 {
  rkr->sw_stat= 0;
  Metro->hide();
  MIDI->show();
 }}
          tooltip {Switch between Midi Converter &
Metronome - Shortcut 'F8'} xywh {480 137 32 18} shortcut 0xffc5 color 62 labelsize 10 align 80 when 6
          class RKR_Button
        }
      }
      Fl_Group Tap {
        user_data 1
        xywh {520 140 276 54} box UP_BOX color 0 selection_color 0 align 112
      } {
        Fl_Light_Button Tap_activar {
          label On
          user_data 2
          callback {rkr->Tap_Bypass = (int)o->value();
if(rkr->Tap_Bypass) rkr->TapTempo_Timeout(0);
ChangeActives();
TAP_LABEL->redraw_label();}
          tooltip {Enable Tap Tempo - Shortcut 'H'} xywh {525 144 38 18} shortcut 0x68 color 62 selection_color 1 labelsize 10 when 1
          class RKR_Light_Button
        }
        Fl_Choice T_SEL {
          label Input
          user_data 12
          callback {rkr->Tap_Selection=(int)o->value();}
          xywh {600 145 87 15} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->set_text_offset(-1);}
          class RKR_Choice
        } {
          MenuItem {} {
            label GUI
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {MIDI Note On}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Jack Transport}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label MTC
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Beat Tracker}
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Choice T_SET {
          label Set
          user_data 12
          callback {rkr->Tap_SetValue=(int)o->value();}
          xywh {714 145 76 15} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->set_text_offset(-1);}
          class RKR_Choice
        } {
          MenuItem {} {
            label {Dl. 1 LFO 1}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/2}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/4}
            xywh {10 10 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/2 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/3 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/4 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/2}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/3}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/4}
            xywh {0 0 36 21} labelsize 9
          }
          MenuItem {} {
            label {Dl. 1/8 LFO 1/8}
            xywh {0 0 36 21} labelsize 9
          }
        }
        Fl_Button T_Apply {
          label Apply
          user_data 77
          callback {if((rkr->Tap_Bypass) && (rkr->Tap_TempoSet>0))
{
rkr->Update_tempo();
UpdateTGUI();
}}
          xywh {628 172 38 15} shortcut 0x67 labelsize 10
          class RKR_Button
        }
        Fl_Button T_BUT {
          label Tap
          user_data 77
          callback {if((rkr->Tap_Bypass) && ( rkr->Tap_Selection==0))
{
T_DIS->value(rkr->TapTempo());
UpdateTGUI();
}}
          tooltip {Tap tempo set - Shortcut 'G'} xywh {671 165 38 23} shortcut 0x67 labelsize 12
          code0 {o->set_label_offset(2);}
          class RKR_Button
        }
        Fl_Box TAP_LABEL {
          label {Tap Tempo}
          user_data 7
          xywh {524 170 93 14} labelfont 1 labelcolor 7 when 0
          class RKR_Box
        }
        Fl_Value_Input T_DIS {
          callback {if(o->value()> 360) o->value(360);
if(o->value()< 20) o->value(20);
if(rkr->Tap_Bypass)
{
rkr->Tap_TempoSet=(int)o->value();
rkr->Update_tempo();
UpdateTGUI();
}}
          xywh {719 165 70 22} align 0 minimum 20 maximum 360 step 1 value 100 textcolor 7
          code0 {o->set_text_offset(4);}
          code1 {o->set_label_offset(4);}
          class RKR_Value_Input
        }
      }
    }
    Fl_Window BankWindow {
      callback {save_stat(1);
o->hide();} open
      xywh {113 380 800 600} type Double box NO_BOX color 4 selection_color 7 hide resizable
      code0 {\#include "bankwindow_gui.h"}
      code1 {o->initialize(rkr, this);}
      code2 {o->hide();}
      class BankWindowGui size_range {320 240 3200 2400}
    } {}
    Fl_Window Order {
      callback {save_stat(2);
o->hide();} open
      xywh {133 400 500 400} type Double box NO_BOX color 4 selection_color 7 hide resizable
      code0 {\#include "orderwindow_gui.h"}
      code1 {o->initialize(rkr, this);}
      code2 {o->hide();}
      class OrderWindowGui size_range {250 200 3200 2400}
    } {}
    Fl_Window Settings {
      callback {save_stat(3);
o->hide();} open
      xywh {390 434 530 580} type Double box NO_BOX color 4 selection_color 7 hide resizable
      code0 {\#include "settingswindow_gui.h"}
      code1 {o->initialize(rkr, this);}
      code2 {o->hide();}
      class SettingsWindowGui size_range {320 290 3200 2900}
    } {}
    Fl_Window MIDILearn {
      callback {MIDILearn->CancelRec->do_callback();
save_stat(5);
o->hide();} open
      xywh {165 106 640 480} type Double box NO_BOX color 4 selection_color 7 hide
      code0 {\#include "midilearnwindow_gui.h"}
      code1 {o->initialize(rkr, this);}
      code2 {o->hide();}
      class MidiLearnWindowGui size_range {320 240 3200 2400}
    } {}
    Fl_Window AboutWin {
      label {About Rakarrack-plus}
      callback {o->hide();} open
      xywh {575 380 375 280} type Double color 8 selection_color 7 hide
      code0 {\#include "aboutwindow_gui.h"}
      code1 {o->initialize(this);}
      code2 {o->hide();}
      class AboutWindowGui
    } {}
    Fl_Window Trigger {
      callback {rkr->ACI_Bypass=0;
save_stat(6);
o->hide();} open
      xywh {31 426 205 165} type Double box NO_BOX color 4 selection_color 7 hide
      code0 {\#include "trigwindow_gui.h"}
      code1 {o->initialize(rkr);}
      code2 {o->hide();}
      class TrigWindowGui
    } {}
    Fl_Window DelayFile {
      label {Delay File} open
      xywh {1072 713 605 265} type Double hide
      code0 {\#include "delayfilewindow_gui.h"}
      code1 {o->hide();}
      class DelayFileWindowGui
    } {}
    code {char tmp[64];
sprintf(tmp,"Version %s",VERSION);
AboutWin->About_Version->copy_label(tmp);} {}
  }
  Function {RKRGUI(int argc, char**argv,RKR *rkr_)} {
    comment {The following functions are defined in the rkrprocess_gui.cxx file.
They are declared in the rakarrack.h file through the fluid IDE.
Changes to the declarations should be made in fluid to be included
in the header file. Changes to the defines can be made directly in the .cxx file.
} C
  } {}
  Function {TimeoutStatic(void* ptr)} {
    comment {Main FLTK gui timeout} open private C return_type {static void}
  } {}
  Function {GuiTimeout(void)} {open private C return_type void
  } {}
  Function {Background_Color_Change(Fl_Color bcolor)} {open
  } {}
  Function {Label_Color_Change(Fl_Color bcolor)} {open
  } {}
  Function {Buttons_Color_Change(Fl_Color bcolor)} {open
  } {}
  Function {Leds_Color_Change(Fl_Color bcolor)} {open
  } {}
  Function {put_icon(Fl_Window* window)} {open
  } {}
  Function {load_stat()} {open
  } {}
  Function {save_stat(int whati)} {open
  } {}
  Function {Put_Loaded()} {open
  } {}
  Function {preset_click(Fl_Button* o, void* v)} {open return_type {static void}
  } {}
  Function {preset_click_i(Fl_Button* o, void*)} {open C return_type {inline void}
  } {}
  Function {reordena()} {open
  } {}
  Function {show_help()} {open
  } {}
  Function {show_lic()} {open
  } {}
  Function {MiraClientes()} {open
  } {}
  Function {MiraConfig()} {open
  } {}
  Function {BankWin_Label(char *filename)} {open
  } {}
  Function {is_modified()} {open
  } {}
  Function {Put_Loaded_Bank()} {open
  } {}
  Function {Chord(int eff)} {open
  } {}
  Function {ActMIDI()} {open
  } {}
  Function {ActOnOff()} {open
  } {}
  Function {PutBackground()} {open
  } {}
  Function {chfsize(int font_size)} {open
  } {}
  Function {ChangeActives()} {open
  } {}
  Function {findpos(int num, int value, Fl_Widget*)} {open
  } {}
  Function {Put_Skin()} {open
  } {}
  Function {FillML(/*int type*/)} {open
  } {}
  Function {DisAssigns()} {open
  } {}
  Function {Prepare_Order()} {open
  } {}
  Function {Show_Next_Time()} {open
  } {}
  Function {update_looper()} {open
  } {}
  Function {UpdateTGUI()} {open
  } {}
  Function {ActACI()} {open
  } {}
  Function {Busca_Eff(int num)} {open return_type int
  } {}
  Function {Fill_Avail(int filter)} {open
  } {}
  Function {highlight()} {open
  } {}
  Function {search_but(int x, int y)} {open return_type int
  } {}
  Function {Scan_Bank_Dir()} {open
  } {}
  Function {Set_Bank(std::string directory)} {open private return_type void
  } {}
  Function {prevnext(int e)} {open return_type {static int}
  } {}
  Function {install_signal_handlers()} {open return_type bool
  } {}
  Function {sigterm_handler(int sig)} {open return_type {static void}
  } {}
  Function {check_signals(void *usrPtr)} {open return_type {static void}
  } {}
  Function {getMIDIControl(int num)} {open
  } {}
  Function {PrepareML()} {open
  } {}
  Function {addpreset(Fl_Widget *w, int num)} {open return_type {inline void}
  } {}
  Function {add_name(Fl_Widget *w, char *name)} {open
  } {}
  Function {FindWidget(int num)} {open return_type {Fl_Widget *}
  } {}
  Function {ReadIntPresets()} {open
  } {}
  Function {delpreset(Fl_Widget *w, int num)} {open return_type {inline void}
  } {}
  Function {Prep_Reorden(int source, int dest)} {open
  } {}
  Function {bank_click(Fl_Choice* o, void* v)} {open return_type {static void}
  } {}
  Function {bank_click_i(Fl_Choice* o, void*)} {open C return_type {inline void}
  } {}
  Function {p_click(Fl_Choice* o, void* v)} {open return_type {static void}
  } {}
  Function {p_click_i(Fl_Choice* o, void*)} {open C return_type {inline void}
  } {}
  Function {RandomPreset()} {open
  } {}
  Function {drag_effect()} {open
  } {}
  Function {AddBankName(const char *name)} {open return_type int
  } {}
  Function {ClearBankNames()} {open
  } {}
  Function {get_bank_file()} {open C return_type {char*}
  } {}
  Function {set_save_file()} {open return_type void
  } {}
  Function {set_bank_made(int a_made)} {open C return_type void
  } {}
  Function {get_bank_made()} {open C return_type int
  } {}
  Function {Load_Midi_Program_Change_Table()} {open C return_type void
  } {}
  Function {Save_Midi_Program_Change_Table()} {open C return_type void
  } {}
}
