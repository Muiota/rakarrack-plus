// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "rakarrack.h"
/* All the sub menu paths for resizing */
const std::vector<std::string> main_submenu_paths
{
    /* Main Window - From RKRGUI::menu_MenuP[] */
    "&File/New",
    "&File/Load Preset",
    "&File/Save Preset",
    "&File/Load &Bank",
    "&File/Save B&ank",
    "&File/Load S&kin",
    "&File/Save Sk&in",
    "&File/Load MIDI Table",
    "&File/Save MIDI Table",
    "&File/&Convert Reverb IR File",
    "&File/Import Internal Presets",
    "&File/Exit",
    "&File/Delay File",
    "&Settings/Preferences",
    "&Settings/MIDI Learn",
    "&Settings/ACI",
    "&Settings/Fullscreen",
    "&Help/Help Contents",
    "&Help/About...",
};
Fl_Tiled_Image *back; 
Fl_Color leds_color; 
Fl_Color back_color; 
Fl_Color fore_color; 
Fl_Color label_color; 
RKR *rkr; // extern global
int global_font_size = C_DEFAULT_FONT_SIZE; // extern global

void RKRGUI::cb_Principal_i(Fl_Double_Window*, void*) {
  is_modified();
save_stat(0);

Pexitprogram=1;
}
void RKRGUI::cb_Principal(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Principal_i(o,v);
}

void RKRGUI::cb_Menu_New_i(Fl_Menu_*, void*) {
  S_new->do_callback();
}
void RKRGUI::cb_Menu_New(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Menu_New_i(o,v);
}

void RKRGUI::cb_Load_Preset_i(Fl_Menu_*, void*) {
  L_preset->do_callback();
}
void RKRGUI::cb_Load_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Preset_i(o,v);
}

void RKRGUI::cb_Save_Preset_i(Fl_Menu_*, void*) {
  S_preset->do_callback();
}
void RKRGUI::cb_Save_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Preset_i(o,v);
}

void RKRGUI::cb_BankWindow_i(Fl_Menu_*, void*) {
  get_bank_file();
}
void RKRGUI::cb_BankWindow(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_BankWindow_i(o,v);
}

void RKRGUI::cb_BankWindow1_i(Fl_Menu_*, void*) {
  set_save_file();
}
void RKRGUI::cb_BankWindow1(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_BankWindow1_i(o,v);
}

void RKRGUI::cb_Load_Skin_i(Fl_Menu_*, void*) {
  char *filename;
filename = fl_file_chooser("Load Skin:","(*.rkrs)",NULL,0);
if (filename == NULL) return;
filename = fl_filename_setext(filename,".rkrs");

if(rkr->loadskin(filename))
{
    Put_Skin();
};
}
void RKRGUI::cb_Load_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Skin_i(o,v);
}

void RKRGUI::cb_Save_Skin_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".rkrs"
filename=fl_file_chooser("Save Skin:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT

rkr->slabel_color = (int) label_color;
rkr->sback_color = (int) back_color;
rkr->sfore_color = (int) fore_color;
rkr->sleds_color = (int) leds_color;
rkr->swidth = (int) Principal->w();
rkr->sheight = (int) Principal->h();
rkr->sschema = Settings->scheme_ch->value();


rkr->saveskin(filename);
}
void RKRGUI::cb_Save_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Skin_i(o,v);
}

void RKRGUI::cb_Load_MTable_i(Fl_Menu_*, void*) {
  Load_Midi_Program_Change_Table();
}
void RKRGUI::cb_Load_MTable(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_MTable_i(o,v);
}

void RKRGUI::cb_Save_MTable_i(Fl_Menu_*, void*) {
  Save_Midi_Program_Change_Table();
}
void RKRGUI::cb_Save_MTable(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_MTable_i(o,v);
}

void RKRGUI::cb_ConvertReverb_i(Fl_Menu_*, void*) {
  char *filename;
char name[70];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Reverb IR File:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
rkr->ConvertReverbFile(filename);
rkr->Message(1,name, "Please, now use Reverbtron to load the new '.rvb' file");
}
void RKRGUI::cb_ConvertReverb(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ConvertReverb_i(o,v);
}

void RKRGUI::cb_ImportPresets_i(Fl_Menu_*, void*) {
  char *filename;
  
filename = fl_file_chooser("Import Internal Presets:","(*)",NULL,0);

if (filename == NULL) return;

if(rkr->MergeIntPreset(filename))
{
    Show_Next_Time();
};
}
void RKRGUI::cb_ImportPresets(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ImportPresets_i(o,v);
}

void RKRGUI::cb_salir_i(Fl_Menu_*, void*) {
  Principal->do_callback();
}
void RKRGUI::cb_salir(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_salir_i(o,v);
}

void RKRGUI::cb_Delay_File_i(Fl_Menu_*, void*) {
  if(!DelayFile->visible())
{
DelayFile->show();
put_icon(DelayFile);
}
else
DelayFile->hide();
}
void RKRGUI::cb_Delay_File(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Delay_File_i(o,v);
}

void RKRGUI::cb_Bank_Menu_i(Fl_Menu_*, void*) {
  B_preset->do_callback();
}
void RKRGUI::cb_Bank_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Bank_Menu_i(o,v);
}

void RKRGUI::cb_Ajustes_i(Fl_Menu_*, void*) {
  if(!Settings->visible())
{
MiraClientes();
MiraConfig();
Settings->show();
put_icon(Settings);
}
else
Settings->hide();
}
void RKRGUI::cb_Ajustes(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Ajustes_i(o,v);
}

void RKRGUI::cb_ML_Menu_i(Fl_Menu_*, void*) {
  if(!MIDILearn->visible())
{
rkr->comemouse=0;
PrepareML();
}
else
MIDILearn->hide();
}
void RKRGUI::cb_ML_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ML_Menu_i(o,v);
}

void RKRGUI::cb_ACI_Menu_i(Fl_Menu_*, void*) {
  if(!Trigger->visible())
{
Trigger->show();
rkr->ACI_Bypass = 1;
put_icon(Trigger);
rkr->old_a_sum = 0.0;
rkr->val_a_sum = 0.0;
}
else
{
Trigger->hide();
rkr->ACI_Bypass = 0;
};
}
void RKRGUI::cb_ACI_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ACI_Menu_i(o,v);
}

void RKRGUI::cb_Fullscreen_i(Fl_Menu_*, void*) {
  if(Principal->fullscreen_active())
    Principal->fullscreen_off();
  else
    Principal->fullscreen();
}
void RKRGUI::cb_Fullscreen(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Fullscreen_i(o,v);
}

void RKRGUI::cb_Contenido_i(Fl_Menu_*, void*) {
  show_help();
}
void RKRGUI::cb_Contenido(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Contenido_i(o,v);
}

void RKRGUI::cb_Acerca_de_i(Fl_Menu_*, void*) {
  int x,y;

x = Principal->x()+((Principal->w()-420)/2);
y = Principal->y()+((Principal->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);
}
void RKRGUI::cb_Acerca_de(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Acerca_de_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MenuP[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"New", 0x6e,  (Fl_Callback*)RKRGUI::cb_Menu_New, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Preset", 0x6c,  (Fl_Callback*)RKRGUI::cb_Load_Preset, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Preset", 0x73,  (Fl_Callback*)RKRGUI::cb_Save_Preset, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load &Bank", 0,  (Fl_Callback*)RKRGUI::cb_BankWindow, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save B&ank", 0,  (Fl_Callback*)RKRGUI::cb_BankWindow1, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load S&kin", 0,  (Fl_Callback*)RKRGUI::cb_Load_Skin, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Sk&in", 0,  (Fl_Callback*)RKRGUI::cb_Save_Skin, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load MIDI Table", 0,  (Fl_Callback*)RKRGUI::cb_Load_MTable, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save MIDI Table", 0,  (Fl_Callback*)RKRGUI::cb_Save_MTable, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Convert Reverb IR File", 0,  (Fl_Callback*)RKRGUI::cb_ConvertReverb, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Import Internal Presets", 0,  (Fl_Callback*)RKRGUI::cb_ImportPresets, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0x78,  (Fl_Callback*)RKRGUI::cb_salir, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"Delay File", 0,  (Fl_Callback*)RKRGUI::cb_Delay_File, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Bank", 0x62,  (Fl_Callback*)RKRGUI::cb_Bank_Menu, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Settings", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences", 0x69,  (Fl_Callback*)RKRGUI::cb_Ajustes, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"MIDI Learn", 0x65,  (Fl_Callback*)RKRGUI::cb_ML_Menu, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"ACI", 0x61,  (Fl_Callback*)RKRGUI::cb_ACI_Menu, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Fullscreen", 0xffc9,  (Fl_Callback*)RKRGUI::cb_Fullscreen, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"Help Contents", 0xffbe,  (Fl_Callback*)RKRGUI::cb_Contenido, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"About...", 0,  (Fl_Callback*)RKRGUI::cb_Acerca_de, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RKRGUI::Archivo = RKRGUI::menu_MenuP + 0;
Fl_Menu_Item* RKRGUI::Menu_New = RKRGUI::menu_MenuP + 1;
Fl_Menu_Item* RKRGUI::Load_Preset = RKRGUI::menu_MenuP + 2;
Fl_Menu_Item* RKRGUI::Save_Preset = RKRGUI::menu_MenuP + 3;
Fl_Menu_Item* RKRGUI::Load_Skin = RKRGUI::menu_MenuP + 6;
Fl_Menu_Item* RKRGUI::Save_Skin = RKRGUI::menu_MenuP + 7;
Fl_Menu_Item* RKRGUI::Load_MTable = RKRGUI::menu_MenuP + 8;
Fl_Menu_Item* RKRGUI::Save_MTable = RKRGUI::menu_MenuP + 9;
Fl_Menu_Item* RKRGUI::ConvertReverb = RKRGUI::menu_MenuP + 10;
Fl_Menu_Item* RKRGUI::ImportPresets = RKRGUI::menu_MenuP + 11;
Fl_Menu_Item* RKRGUI::salir = RKRGUI::menu_MenuP + 12;
Fl_Menu_Item* RKRGUI::Delay_File = RKRGUI::menu_MenuP + 13;
Fl_Menu_Item* RKRGUI::Bank_Menu = RKRGUI::menu_MenuP + 15;
Fl_Menu_Item* RKRGUI::Ajustes = RKRGUI::menu_MenuP + 17;
Fl_Menu_Item* RKRGUI::ML_Menu = RKRGUI::menu_MenuP + 18;
Fl_Menu_Item* RKRGUI::ACI_Menu = RKRGUI::menu_MenuP + 19;
Fl_Menu_Item* RKRGUI::Ayuda = RKRGUI::menu_MenuP + 22;
Fl_Menu_Item* RKRGUI::Contenido = RKRGUI::menu_MenuP + 23;
Fl_Menu_Item* RKRGUI::Acerca_de = RKRGUI::menu_MenuP + 24;

void RKRGUI::cb_TITTLE_L_i(Fl_Button*, void*) {
  Tuner->hide();
Sco->show();
Sco->set_scope_ON(true);
Fl::focus(Open_Order);
}
void RKRGUI::cb_TITTLE_L(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_TITTLE_L_i(o,v);
}

void RKRGUI::cb_tuner_activar_i(RKR_Light_Button* o, void*) {
  rkr->Tuner_Bypass=(int)o->value();
tuner_bar->value(-32);
WNote->copy_label("");
WRfreq->copy_label("");
WNfreq->copy_label("");
ChangeActives();
TUNER_LABEL->redraw_label();
}
void RKRGUI::cb_tuner_activar(RKR_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_tuner_activar_i(o,v);
}

void RKRGUI::cb_ActivarGeneral_i(RKR_Light_Button* o, void*) {
  rkr->Bypass=o->value();
rkr->val_il_sum=-50.0;
rkr->val_ir_sum=-50.0;

rkr->val_vl_sum=-50.0;
rkr->val_vr_sum=-50.0;

rkr->old_vl_sum=-50.0;
rkr->old_vr_sum=-50.0;

rkr->old_il_sum=-50.0;
rkr->old_ir_sum=-50.0;

input_vul->value(-50.0);
input_vur->value(-50.0);

output_vul->value(-50.0);
output_vur->value(-50.0);


ChangeActives();  
LABEL_IO->redraw_label();

if (!o->value())
   {
    rkr->OnCounter = 0;
    if (rkr->Tuner_Bypass)
        {
           tuner_activar->value(0);
           tuner_activar->do_callback();
        } 
    if (rkr->MIDIConverter_Bypass)  
        {
            MIDI->midi_activar->value(0);
            MIDI->midi_activar->do_callback();
        }
             
rkr->cleanup_efx();

};
}
void RKRGUI::cb_ActivarGeneral(RKR_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ActivarGeneral_i(o,v);
}

void RKRGUI::cb_BostBut_i(RKR_Button* o, void*) {
  if(o->value()) rkr->booster = dB2rap(10);
else rkr->booster=1.0f;
}
void RKRGUI::cb_BostBut(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_BostBut_i(o,v);
}

void RKRGUI::cb_Balance_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(12);
 return;
} 
rkr->Fraction_Bypass=(float)(o->value()/100.0f);
}
void RKRGUI::cb_Balance(RKR_Slider* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Balance_i(o,v);
}

void RKRGUI::cb_Nivel_Entrada_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(14);
 return;
} 
rkr->Input_Gain=(float)((o->value()+50)/100.0);
rkr->calculavol(1);
}
void RKRGUI::cb_Nivel_Entrada(RKR_Slider* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Entrada_i(o,v);
}

void RKRGUI::cb_Nivel_Salida_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(7);
 return;
} 

rkr->Master_Volume=(float)((o->value()+50)/100.0);
rkr->calculavol(2);
}
void RKRGUI::cb_Nivel_Salida(RKR_Slider* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Salida_i(o,v);
}

void RKRGUI::cb_metro_activar_i(RKR_Light_Button* o, void*) {
  if ((int)o->value()==0)
{ 
  Metro_Led->color(fl_darker(FL_RED));
  Metro_Led->redraw();
}

rkr->M_Metronome->cleanup();
rkr->Metro_Bypass=(int)o->value();


ChangeActives();
Metro_Label->redraw_label();
}
void RKRGUI::cb_metro_activar(RKR_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_metro_activar_i(o,v);
}

void RKRGUI::cb_MetroBar_i(RKR_Choice* o, void*) {
  rkr->M_Metro_Bar=(int)o->value();

switch(rkr->M_Metro_Bar)

   {
      case 0:
      rkr->M_Metronome->set_meter(2);
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(3);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(4);
      break;                    
      case 3:
      rkr->M_Metronome->set_meter(5);
      break;                    
      case 4:
      rkr->M_Metronome->set_meter(6);
      break;                    
      case 5:
      rkr->M_Metronome->set_meter(7);
      break;                    
      case 6:
      rkr->M_Metronome->set_meter(9);
      break;                    
      case 7:
      rkr->M_Metronome->set_meter(11);
      break;                    

 };
}
void RKRGUI::cb_MetroBar(RKR_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MetroBar_i(o,v);
}

void RKRGUI::cb_Metro_Volume_i(RKR_Slider* o, void*) {
  rkr->M_Metro_Vol=2.0f*(float)o->value()/100.0f;
}
void RKRGUI::cb_Metro_Volume(RKR_Slider* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Metro_Volume_i(o,v);
}

void RKRGUI::cb_MetroSound_i(RKR_Choice* o, void*) {
  rkr->M_Metro_Sound=(int)o->value();

switch(rkr->M_Metro_Sound)

   {
      case 0:
      MetroBar->do_callback();
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(1);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(0);
      break;                    
       

 };
}
void RKRGUI::cb_MetroSound(RKR_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MetroSound_i(o,v);
}

void RKRGUI::cb_Metro_Tempo_i(RKR_Slider* o, void*) {
  rkr->M_Metro_Tempo=(int)o->value();
rkr->M_Metronome->set_tempo(rkr->M_Metro_Tempo);
}
void RKRGUI::cb_Metro_Tempo(RKR_Slider* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Metro_Tempo_i(o,v);
}

void RKRGUI::cb_L_B1_i(RKR_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Default.rkrb", DATADIR);
int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=0;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B1(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B1_i(o,v);
}

void RKRGUI::cb_L_B2_i(RKR_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=1;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B2(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B2_i(o,v);
}

void RKRGUI::cb_L_B3_i(RKR_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra1.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=2;
BankWin_Label(temp);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B3(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B3_i(o,v);
}

void RKRGUI::cb_L_B4_i(RKR_Button*, void*) {
  is_modified();
int ok=rkr->loadbank(rkr->BankFilename);
if(ok) 
{
rkr->a_bank=3;
BankWin_Label(rkr->BankFilename);
Put_Loaded_Bank();
BankWindow->unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B4(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B4_i(o,v);
}

void RKRGUI::cb_S_new_i(RKR_Button*, void*) {
  rkr->New();
DisAssigns();
FillML();
Prepare_Order();
Put_Loaded();
}
void RKRGUI::cb_S_new(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_new_i(o,v);
}

void RKRGUI::cb_L_preset_i(RKR_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Load Preset:","(*.rkr)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkr");
rkr->loadfile(filename);
Put_Loaded();
}
void RKRGUI::cb_L_preset(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_preset_i(o,v);
}

void RKRGUI::cb_S_preset_i(RKR_Button*, void*) {
  char *filename;
#define EXT ".rkr"
filename=fl_file_chooser("Save Preset:","(*" EXT")",rkr->Preset_Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
rkr->savefile(filename);
}
void RKRGUI::cb_S_preset(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_preset_i(o,v);
}

void RKRGUI::cb_Compare_i(RKR_Light_Button* o, void*) {
  if ((int) o->value())
{
rkr->Preset_to_Bank(0);
rkr->Bank_to_Preset((int)Preset_Counter->value());
Put_Loaded();
}

else
{
 rkr->Bank_to_Preset(0);
 Put_Loaded();
};
}
void RKRGUI::cb_Compare(RKR_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Compare_i(o,v);
}

void RKRGUI::cb_B_preset_i(RKR_Button*, void*) {
  if(!BankWindow->visible())
{
if(!made) BankWindow->make_window_banks();
BankWindow->show();
put_icon(BankWindow);
Scan_Bank_Dir();
}
else
BankWindow->hide();
}
void RKRGUI::cb_B_preset(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_B_preset_i(o,v);
}

void RKRGUI::cb_WPreset_Name_i(RKR_Input* o, void*) {
  strcpy(rkr->Preset_Name,o->value());
}
void RKRGUI::cb_WPreset_Name(RKR_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WPreset_Name_i(o,v);
}

void RKRGUI::cb_Preset_Counter_i(RKR_Counter* o, void*) {
  rkr->new_bank_loaded=0;
BankWindow->unlight_preset(rkr->Selected_Preset);
rkr->Bank_to_Preset((int) o->value());
BankWindow->light_preset((int)o->value());
rkr->Selected_Preset=(int)o->value();
rkr->OnCounter=0;
FillML();
Prepare_Order();
Put_Loaded();
if(rkr->Tap_Updated) UpdateTGUI();
}
void RKRGUI::cb_Preset_Counter(RKR_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Preset_Counter_i(o,v);
}

void RKRGUI::cb_RandomP_i(RKR_Button*, void*) {
  RandomPreset();
}
void RKRGUI::cb_RandomP(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_RandomP_i(o,v);
}

void RKRGUI::cb_Open_Order_i(RKR_Button*, void*) {
  if (!Order->visible())
{
Prepare_Order();
rkr->deachide=0;
Order->Order_DeacHide->value(rkr->deachide);
Order->show();
put_icon(Order);
}
else
Order->hide();
}
void RKRGUI::cb_Open_Order(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Open_Order_i(o,v);
}

void RKRGUI::cb_Etit_i(RKR_Button* o, void*) {
  //if(rkr->Bypass)
//{
o->hide();
Analy->show();
Analy->set_analyzer_ON(true);
//};
}
void RKRGUI::cb_Etit(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Etit_i(o,v);
}

void RKRGUI::cb_HideUE_i(RKR_Button* o, void*) {
  if(rkr->deachide)
{
 rkr->deachide=0;
 o->label("Hide");
}
else
{
rkr->deachide=1;
 o->label("Show");
}
 
reordena();
}
void RKRGUI::cb_HideUE(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_HideUE_i(o,v);
}

void RKRGUI::cb_SwitchMod_i(RKR_Button*, void*) {
  if(rkr->sw_stat==0) 
{ 
  rkr->sw_stat = 1;
  MIDI->hide();
  Metro->show();
}
else
 {
  rkr->sw_stat= 0;
  Metro->hide();
  MIDI->show();
 };
}
void RKRGUI::cb_SwitchMod(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_SwitchMod_i(o,v);
}

void RKRGUI::cb_Tap_activar_i(RKR_Light_Button* o, void*) {
  rkr->Tap_Bypass = (int)o->value();
if(rkr->Tap_Bypass) rkr->TapTempo_Timeout(0);
ChangeActives();
TAP_LABEL->redraw_label();
}
void RKRGUI::cb_Tap_activar(RKR_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Tap_activar_i(o,v);
}

void RKRGUI::cb_T_SEL_i(RKR_Choice* o, void*) {
  rkr->Tap_Selection=(int)o->value();
}
void RKRGUI::cb_T_SEL(RKR_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_SEL_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_T_SEL[] = {
 {"GUI", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"MIDI Note On", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Jack Transport", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"MTC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Beat Tracker", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_T_SET_i(RKR_Choice* o, void*) {
  rkr->Tap_SetValue=(int)o->value();
}
void RKRGUI::cb_T_SET(RKR_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_SET_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_T_SET[] = {
 {"Dl. 1 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_T_Apply_i(RKR_Button*, void*) {
  if((rkr->Tap_Bypass) && (rkr->Tap_TempoSet>0))
{
rkr->Update_tempo();
UpdateTGUI();
};
}
void RKRGUI::cb_T_Apply(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_Apply_i(o,v);
}

void RKRGUI::cb_T_BUT_i(RKR_Button*, void*) {
  if((rkr->Tap_Bypass) && ( rkr->Tap_Selection==0))
{
T_DIS->value(rkr->TapTempo());
UpdateTGUI();
};
}
void RKRGUI::cb_T_BUT(RKR_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_BUT_i(o,v);
}

void RKRGUI::cb_T_DIS_i(RKR_Value_Input* o, void*) {
  if(o->value()> 360) o->value(360);
if(o->value()< 20) o->value(20);
if(rkr->Tap_Bypass)
{
rkr->Tap_TempoSet=(int)o->value();
rkr->Update_tempo();
UpdateTGUI();
};
}
void RKRGUI::cb_T_DIS(RKR_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_DIS_i(o,v);
}

void RKRGUI::cb_BankWindow2_i(BankWindowGui* o, void*) {
  save_stat(1);
o->hide();
}
void RKRGUI::cb_BankWindow2(BankWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_BankWindow2_i(o,v);
}

void RKRGUI::cb_Order_i(OrderWindowGui* o, void*) {
  save_stat(2);
o->hide();
}
void RKRGUI::cb_Order(OrderWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Order_i(o,v);
}

void RKRGUI::cb_Settings_i(SettingsWindowGui* o, void*) {
  save_stat(3);
o->hide();
}
void RKRGUI::cb_Settings(SettingsWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Settings_i(o,v);
}

void RKRGUI::cb_MIDILearn_i(MidiLearnWindowGui* o, void*) {
  MIDILearn->CancelRec->do_callback();
save_stat(5);
o->hide();
}
void RKRGUI::cb_MIDILearn(MidiLearnWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_MIDILearn_i(o,v);
}

void RKRGUI::cb_AboutWin_i(AboutWindowGui* o, void*) {
  o->hide();
}
void RKRGUI::cb_AboutWin(AboutWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_AboutWin_i(o,v);
}

void RKRGUI::cb_Trigger_i(TrigWindowGui* o, void*) {
  rkr->ACI_Bypass=0;
save_stat(6);
o->hide();
}
void RKRGUI::cb_Trigger(TrigWindowGui* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Trigger_i(o,v);
}

void RKRGUI::make_window() {
  { Principal = new Fl_Double_Window(800, 600);
    Principal->box(FL_DOWN_BOX);
    Principal->color(FL_FOREGROUND_COLOR);
    Principal->callback((Fl_Callback*)cb_Principal, (void*)(this));
    { fondo = new Fl_Box(1, 1, 800, 600);
      fondo->align(Fl_Align(96|FL_ALIGN_INSIDE));
    } // Fl_Box* fondo
    { RKR_Menu_Bar* o = MenuP = new RKR_Menu_Bar(2, 2, 518, 18);
      MenuP->box(FL_NO_BOX);
      MenuP->color((Fl_Color)178);
      MenuP->selection_color(FL_BACKGROUND2_COLOR);
      MenuP->labeltype(FL_NORMAL_LABEL);
      MenuP->labelfont(0);
      MenuP->labelsize(14);
      MenuP->labelcolor(FL_BACKGROUND2_COLOR);
      MenuP->textcolor(FL_BACKGROUND2_COLOR);
      MenuP->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MenuP->when(FL_WHEN_RELEASE_ALWAYS);
      MenuP->menu(menu_MenuP);
      o->set_label_offset(4);
      o->set_submenu_paths(main_submenu_paths);
    } // RKR_Menu_Bar* MenuP
    { TITTLE_L = new Fl_Button(521, 2, 276, 21);
      TITTLE_L->tooltip("Click here to activate scope");
      TITTLE_L->type(1);
      TITTLE_L->box(FL_NO_BOX);
      TITTLE_L->labeltype(FL_EMBOSSED_LABEL);
      TITTLE_L->labelfont(1);
      TITTLE_L->labelsize(40);
      TITTLE_L->callback((Fl_Callback*)cb_TITTLE_L);
      TITTLE_L->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Button* TITTLE_L
    { RKR_Box* o = LMT_LED = new RKR_Box(504, 8, 8, 8, "Lmt");
      LMT_LED->box(FL_DOWN_BOX);
      LMT_LED->color((Fl_Color)2);
      LMT_LED->selection_color(FL_BACKGROUND_COLOR);
      LMT_LED->labeltype(FL_NORMAL_LABEL);
      LMT_LED->labelfont(0);
      LMT_LED->labelsize(10);
      LMT_LED->labelcolor(FL_BACKGROUND2_COLOR);
      LMT_LED->align(Fl_Align(FL_ALIGN_LEFT));
      LMT_LED->when(FL_WHEN_RELEASE);
      o->set_label_offset(0);
    } // RKR_Box* LMT_LED
    { RKR_Box* o = CLIP_LED = new RKR_Box(541, 8, 8, 8, "Clip");
      CLIP_LED->box(FL_DOWN_BOX);
      CLIP_LED->color((Fl_Color)1);
      CLIP_LED->selection_color(FL_BACKGROUND_COLOR);
      CLIP_LED->labeltype(FL_NORMAL_LABEL);
      CLIP_LED->labelfont(0);
      CLIP_LED->labelsize(10);
      CLIP_LED->labelcolor(FL_BACKGROUND2_COLOR);
      CLIP_LED->align(Fl_Align(FL_ALIGN_LEFT));
      CLIP_LED->when(FL_WHEN_RELEASE);
      o->set_label_offset(0);
    } // RKR_Box* CLIP_LED
    { RKR_Box* o = UPS_LED = new RKR_Box(608, 8, 8, 8, "Resample");
      UPS_LED->box(FL_DOWN_BOX);
      UPS_LED->color((Fl_Color)2);
      UPS_LED->selection_color(FL_BACKGROUND_COLOR);
      UPS_LED->labeltype(FL_NORMAL_LABEL);
      UPS_LED->labelfont(0);
      UPS_LED->labelsize(10);
      UPS_LED->labelcolor(FL_BACKGROUND2_COLOR);
      UPS_LED->align(Fl_Align(FL_ALIGN_LEFT));
      UPS_LED->when(FL_WHEN_RELEASE);
      o->set_label_offset(0);
    } // RKR_Box* UPS_LED
    { RKR_Box* o = P_MIN_ST = new RKR_Box(620, 3, 29, 20, "Midi In");
      P_MIN_ST->box(FL_NO_BOX);
      P_MIN_ST->color(FL_BACKGROUND_COLOR);
      P_MIN_ST->selection_color(FL_BACKGROUND_COLOR);
      P_MIN_ST->labeltype(FL_NORMAL_LABEL);
      P_MIN_ST->labelfont(1);
      P_MIN_ST->labelsize(8);
      P_MIN_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_MIN_ST->user_data((void*)(BOX_LED_DATA));
      P_MIN_ST->align(Fl_Align(FL_ALIGN_WRAP));
      P_MIN_ST->when(FL_WHEN_RELEASE);
      P_MIN_ST->hide();
      o->set_label_offset(-2);
    } // RKR_Box* P_MIN_ST
    { RKR_Box* o = P_MOUT_ST = new RKR_Box(648, 3, 29, 20, "Midi Out");
      P_MOUT_ST->box(FL_NO_BOX);
      P_MOUT_ST->color(FL_BACKGROUND_COLOR);
      P_MOUT_ST->selection_color(FL_BACKGROUND_COLOR);
      P_MOUT_ST->labeltype(FL_NORMAL_LABEL);
      P_MOUT_ST->labelfont(1);
      P_MOUT_ST->labelsize(8);
      P_MOUT_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_MOUT_ST->user_data((void*)(BOX_LED_DATA));
      P_MOUT_ST->align(Fl_Align(FL_ALIGN_WRAP));
      P_MOUT_ST->when(FL_WHEN_RELEASE);
      P_MOUT_ST->hide();
      o->set_label_offset(-2);
    } // RKR_Box* P_MOUT_ST
    { RKR_Box* o = P_AUX_ST = new RKR_Box(676, 5, 32, 17, "Aux");
      P_AUX_ST->box(FL_NO_BOX);
      P_AUX_ST->color(FL_BACKGROUND_COLOR);
      P_AUX_ST->selection_color(FL_BACKGROUND_COLOR);
      P_AUX_ST->labeltype(FL_NORMAL_LABEL);
      P_AUX_ST->labelfont(1);
      P_AUX_ST->labelsize(10);
      P_AUX_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_AUX_ST->user_data((void*)(BOX_LED_DATA));
      P_AUX_ST->align(Fl_Align(FL_ALIGN_CENTER));
      P_AUX_ST->when(FL_WHEN_RELEASE);
      P_AUX_ST->hide();
      o->set_label_offset(0);
    } // RKR_Box* P_AUX_ST
    { RKR_Box* o = P_IN_ST = new RKR_Box(698, 5, 32, 17, "In");
      P_IN_ST->box(FL_NO_BOX);
      P_IN_ST->color(FL_BACKGROUND_COLOR);
      P_IN_ST->selection_color(FL_BACKGROUND_COLOR);
      P_IN_ST->labeltype(FL_NORMAL_LABEL);
      P_IN_ST->labelfont(1);
      P_IN_ST->labelsize(10);
      P_IN_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_IN_ST->user_data((void*)(BOX_LED_DATA));
      P_IN_ST->align(Fl_Align(FL_ALIGN_CENTER));
      P_IN_ST->when(FL_WHEN_RELEASE);
      P_IN_ST->hide();
      o->set_label_offset(0);
    } // RKR_Box* P_IN_ST
    { RKR_Box* o = P_OUT_ST = new RKR_Box(719, 5, 32, 17, "Out");
      P_OUT_ST->box(FL_NO_BOX);
      P_OUT_ST->color(FL_BACKGROUND_COLOR);
      P_OUT_ST->selection_color(FL_BACKGROUND_COLOR);
      P_OUT_ST->labeltype(FL_NORMAL_LABEL);
      P_OUT_ST->labelfont(1);
      P_OUT_ST->labelsize(10);
      P_OUT_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_OUT_ST->user_data((void*)(BOX_LED_DATA));
      P_OUT_ST->align(Fl_Align(FL_ALIGN_CENTER));
      P_OUT_ST->when(FL_WHEN_RELEASE);
      P_OUT_ST->hide();
      o->set_label_offset(0);
    } // RKR_Box* P_OUT_ST
    { RKR_Box* o = CPULOAD = new RKR_Box(750, 5, 45, 17);
      CPULOAD->box(FL_NO_BOX);
      CPULOAD->color(FL_BACKGROUND_COLOR);
      CPULOAD->selection_color(FL_BACKGROUND_COLOR);
      CPULOAD->labeltype(FL_NORMAL_LABEL);
      CPULOAD->labelfont(0);
      CPULOAD->labelsize(10);
      CPULOAD->labelcolor(FL_BACKGROUND2_COLOR);
      CPULOAD->user_data((void*)(BOX_LED_DATA));
      CPULOAD->align(Fl_Align(FL_ALIGN_CENTER));
      CPULOAD->when(FL_WHEN_RELEASE);
      o->set_label_offset(0);
    } // RKR_Box* CPULOAD
    { Sco = new Scope(545, 25, 226, 59, "Rakarrack");
      Sco->tooltip("Click here to turn off scope");
      Sco->box(FL_NO_BOX);
      Sco->color(FL_BACKGROUND_COLOR);
      Sco->selection_color(FL_BACKGROUND_COLOR);
      Sco->labeltype(FL_EMBOSSED_LABEL);
      Sco->labelfont(1);
      Sco->labelsize(40);
      Sco->labelcolor(FL_BACKGROUND2_COLOR);
      Sco->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      Sco->when(FL_WHEN_RELEASE);
      Sco->hide();
    } // Scope* Sco
    { E1 = new Fl_Box(2, 212, 1, 1);
      E1->labelsize(18);
      E1->hide();
      E1->deactivate();
    } // Fl_Box* E1
    { E2 = new Fl_Box(162, 212, 1, 1);
      E2->labelsize(18);
      E2->hide();
      E2->deactivate();
    } // Fl_Box* E2
    { E3 = new Fl_Box(322, 212, 1, 1);
      E3->labelsize(18);
      E3->hide();
      E3->deactivate();
    } // Fl_Box* E3
    { E4 = new Fl_Box(482, 212, 1, 1);
      E4->labelsize(18);
      E4->hide();
      E4->deactivate();
    } // Fl_Box* E4
    { E5 = new Fl_Box(642, 212, 1, 1);
      E5->labelsize(18);
      E5->hide();
      E5->deactivate();
    } // Fl_Box* E5
    { E6 = new Fl_Box(2, 413, 1, 1);
      E6->labelsize(18);
      E6->hide();
      E6->deactivate();
    } // Fl_Box* E6
    { E7 = new Fl_Box(162, 413, 1, 1);
      E7->labelsize(18);
      E7->hide();
      E7->deactivate();
    } // Fl_Box* E7
    { E8 = new Fl_Box(322, 413, 1, 1);
      E8->labelsize(18);
      E8->hide();
      E8->deactivate();
    } // Fl_Box* E8
    { E9 = new Fl_Box(483, 413, 1, 1);
      E9->labelsize(18);
      E9->hide();
      E9->deactivate();
    } // Fl_Box* E9
    { E10 = new Fl_Box(642, 413, 1, 1);
      E10->labelsize(18);
      E10->hide();
      E10->deactivate();
    } // Fl_Box* E10
    { L1 = new RKR_Box(2, 195, 158, 17, "label");
      L1->box(FL_NO_BOX);
      L1->color(FL_BACKGROUND_COLOR);
      L1->selection_color(FL_BACKGROUND_COLOR);
      L1->labeltype(FL_NORMAL_LABEL);
      L1->labelfont(1);
      L1->labelsize(14);
      L1->labelcolor(FL_BACKGROUND2_COLOR);
      L1->user_data((void*)(770));
      L1->align(Fl_Align(FL_ALIGN_CLIP));
      L1->when(FL_WHEN_RELEASE);
    } // RKR_Box* L1
    { L2 = new RKR_Box(162, 195, 158, 17, "label");
      L2->box(FL_NO_BOX);
      L2->color(FL_BACKGROUND_COLOR);
      L2->selection_color(FL_BACKGROUND_COLOR);
      L2->labeltype(FL_NORMAL_LABEL);
      L2->labelfont(1);
      L2->labelsize(14);
      L2->labelcolor(FL_BACKGROUND2_COLOR);
      L2->user_data((void*)(771));
      L2->align(Fl_Align(FL_ALIGN_CLIP));
      L2->when(FL_WHEN_RELEASE);
    } // RKR_Box* L2
    { L3 = new RKR_Box(322, 195, 158, 17, "label");
      L3->box(FL_NO_BOX);
      L3->color(FL_BACKGROUND_COLOR);
      L3->selection_color(FL_BACKGROUND_COLOR);
      L3->labeltype(FL_NORMAL_LABEL);
      L3->labelfont(1);
      L3->labelsize(14);
      L3->labelcolor(FL_BACKGROUND2_COLOR);
      L3->user_data((void*)(772));
      L3->align(Fl_Align(FL_ALIGN_CENTER));
      L3->when(FL_WHEN_RELEASE);
    } // RKR_Box* L3
    { L4 = new RKR_Box(482, 195, 158, 17, "label");
      L4->box(FL_NO_BOX);
      L4->color(FL_BACKGROUND_COLOR);
      L4->selection_color(FL_BACKGROUND_COLOR);
      L4->labeltype(FL_NORMAL_LABEL);
      L4->labelfont(1);
      L4->labelsize(14);
      L4->labelcolor(FL_BACKGROUND2_COLOR);
      L4->user_data((void*)(773));
      L4->align(Fl_Align(FL_ALIGN_CENTER));
      L4->when(FL_WHEN_RELEASE);
    } // RKR_Box* L4
    { L5 = new RKR_Box(642, 195, 157, 17, "label");
      L5->box(FL_NO_BOX);
      L5->color(FL_BACKGROUND_COLOR);
      L5->selection_color(FL_BACKGROUND_COLOR);
      L5->labeltype(FL_NORMAL_LABEL);
      L5->labelfont(1);
      L5->labelsize(14);
      L5->labelcolor(FL_BACKGROUND2_COLOR);
      L5->user_data((void*)(774));
      L5->align(Fl_Align(FL_ALIGN_CENTER));
      L5->when(FL_WHEN_RELEASE);
    } // RKR_Box* L5
    { L6 = new RKR_Box(1, 396, 158, 17, "label");
      L6->box(FL_NO_BOX);
      L6->color(FL_BACKGROUND_COLOR);
      L6->selection_color(FL_BACKGROUND_COLOR);
      L6->labeltype(FL_NORMAL_LABEL);
      L6->labelfont(1);
      L6->labelsize(14);
      L6->labelcolor(FL_BACKGROUND2_COLOR);
      L6->user_data((void*)(775));
      L6->align(Fl_Align(FL_ALIGN_CENTER));
      L6->when(FL_WHEN_RELEASE);
    } // RKR_Box* L6
    { L7 = new RKR_Box(162, 396, 158, 17, "label");
      L7->box(FL_NO_BOX);
      L7->color(FL_BACKGROUND_COLOR);
      L7->selection_color(FL_BACKGROUND_COLOR);
      L7->labeltype(FL_NORMAL_LABEL);
      L7->labelfont(1);
      L7->labelsize(14);
      L7->labelcolor(FL_BACKGROUND2_COLOR);
      L7->user_data((void*)(776));
      L7->align(Fl_Align(FL_ALIGN_CENTER));
      L7->when(FL_WHEN_RELEASE);
    } // RKR_Box* L7
    { L8 = new RKR_Box(322, 396, 158, 17, "label");
      L8->box(FL_NO_BOX);
      L8->color(FL_BACKGROUND_COLOR);
      L8->selection_color(FL_BACKGROUND_COLOR);
      L8->labeltype(FL_NORMAL_LABEL);
      L8->labelfont(1);
      L8->labelsize(14);
      L8->labelcolor(FL_BACKGROUND2_COLOR);
      L8->user_data((void*)(777));
      L8->align(Fl_Align(FL_ALIGN_CENTER));
      L8->when(FL_WHEN_RELEASE);
    } // RKR_Box* L8
    { L9 = new RKR_Box(482, 396, 158, 17, "label");
      L9->box(FL_NO_BOX);
      L9->color(FL_BACKGROUND_COLOR);
      L9->selection_color(FL_BACKGROUND_COLOR);
      L9->labeltype(FL_NORMAL_LABEL);
      L9->labelfont(1);
      L9->labelsize(14);
      L9->labelcolor(FL_BACKGROUND2_COLOR);
      L9->user_data((void*)(778));
      L9->align(Fl_Align(FL_ALIGN_CENTER));
      L9->when(FL_WHEN_RELEASE);
    } // RKR_Box* L9
    { L10 = new RKR_Box(642, 396, 154, 17, "label");
      L10->box(FL_NO_BOX);
      L10->color(FL_BACKGROUND_COLOR);
      L10->selection_color(FL_BACKGROUND_COLOR);
      L10->labeltype(FL_NORMAL_LABEL);
      L10->labelfont(1);
      L10->labelsize(14);
      L10->labelcolor(FL_BACKGROUND2_COLOR);
      L10->user_data((void*)(779));
      L10->align(Fl_Align(FL_ALIGN_CENTER));
      L10->when(FL_WHEN_RELEASE);
    } // RKR_Box* L10
    { EQ = new EqGui(2, 212, 158, 184);
      EQ->box(FL_UP_BOX);
      EQ->color(FL_FOREGROUND_COLOR);
      EQ->selection_color(FL_FOREGROUND_COLOR);
      EQ->labeltype(FL_NORMAL_LABEL);
      EQ->labelfont(1);
      EQ->labelsize(14);
      EQ->labelcolor(FL_FOREGROUND_COLOR);
      EQ->user_data((void*)(1));
      EQ->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EQ->when(FL_WHEN_RELEASE);
      EQ->hide();
      EQ->end();
    } // EqGui* EQ
    { COMPRESS = new CompressGui(161, 212, 158, 184);
      COMPRESS->box(FL_UP_BOX);
      COMPRESS->color(FL_FOREGROUND_COLOR);
      COMPRESS->selection_color(FL_FOREGROUND_COLOR);
      COMPRESS->labeltype(FL_NORMAL_LABEL);
      COMPRESS->labelfont(1);
      COMPRESS->labelsize(14);
      COMPRESS->labelcolor(FL_FOREGROUND_COLOR);
      COMPRESS->user_data((void*)(1));
      COMPRESS->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COMPRESS->when(FL_WHEN_RELEASE);
      COMPRESS->hide();
      COMPRESS->end();
    } // CompressGui* COMPRESS
    { DIST = new DistGui(320, 212, 158, 184);
      DIST->box(FL_UP_BOX);
      DIST->color(FL_FOREGROUND_COLOR);
      DIST->selection_color(FL_FOREGROUND_COLOR);
      DIST->labeltype(FL_NORMAL_LABEL);
      DIST->labelfont(1);
      DIST->labelsize(14);
      DIST->labelcolor(FL_FOREGROUND_COLOR);
      DIST->user_data((void*)(1));
      DIST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DIST->when(FL_WHEN_RELEASE);
      DIST->hide();
      DIST->end();
    } // DistGui* DIST
    { OVRD = new OvrdGui(480, 212, 158, 184);
      OVRD->box(FL_UP_BOX);
      OVRD->color(FL_FOREGROUND_COLOR);
      OVRD->selection_color(FL_FOREGROUND_COLOR);
      OVRD->labeltype(FL_NORMAL_LABEL);
      OVRD->labelfont(1);
      OVRD->labelsize(14);
      OVRD->labelcolor(FL_FOREGROUND_COLOR);
      OVRD->user_data((void*)(1));
      OVRD->align(Fl_Align(96|FL_ALIGN_INSIDE));
      OVRD->when(FL_WHEN_RELEASE);
      OVRD->hide();
      OVRD->end();
    } // OvrdGui* OVRD
    { ECHO = new EchoGui(639, 212, 158, 184);
      ECHO->box(FL_UP_BOX);
      ECHO->color(FL_FOREGROUND_COLOR);
      ECHO->selection_color(FL_FOREGROUND_COLOR);
      ECHO->labeltype(FL_NORMAL_LABEL);
      ECHO->labelfont(1);
      ECHO->labelsize(14);
      ECHO->labelcolor(FL_FOREGROUND_COLOR);
      ECHO->user_data((void*)(1));
      ECHO->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ECHO->when(FL_WHEN_RELEASE);
      ECHO->hide();
      ECHO->end();
    } // EchoGui* ECHO
    { CHORUS = new ChorusGui(2, 413, 158, 184);
      CHORUS->box(FL_UP_BOX);
      CHORUS->color(FL_FOREGROUND_COLOR);
      CHORUS->selection_color(FL_FOREGROUND_COLOR);
      CHORUS->labeltype(FL_NORMAL_LABEL);
      CHORUS->labelfont(1);
      CHORUS->labelsize(14);
      CHORUS->labelcolor(FL_FOREGROUND_COLOR);
      CHORUS->user_data((void*)(1));
      CHORUS->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CHORUS->when(FL_WHEN_RELEASE);
      CHORUS->hide();
      CHORUS->end();
    } // ChorusGui* CHORUS
    { PHASER = new PhaserGui(161, 413, 158, 184);
      PHASER->box(FL_UP_BOX);
      PHASER->color(FL_FOREGROUND_COLOR);
      PHASER->selection_color(FL_FOREGROUND_COLOR);
      PHASER->labeltype(FL_NORMAL_LABEL);
      PHASER->labelfont(1);
      PHASER->labelsize(14);
      PHASER->labelcolor(FL_FOREGROUND_COLOR);
      PHASER->user_data((void*)(1));
      PHASER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PHASER->when(FL_WHEN_RELEASE);
      PHASER->hide();
      PHASER->end();
    } // PhaserGui* PHASER
    { FLANGER = new FlangerGui(321, 413, 158, 184);
      FLANGER->box(FL_UP_BOX);
      FLANGER->color(FL_FOREGROUND_COLOR);
      FLANGER->selection_color(FL_FOREGROUND_COLOR);
      FLANGER->labeltype(FL_NORMAL_LABEL);
      FLANGER->labelfont(1);
      FLANGER->labelsize(14);
      FLANGER->labelcolor(FL_FOREGROUND_COLOR);
      FLANGER->user_data((void*)(1));
      FLANGER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      FLANGER->when(FL_WHEN_RELEASE);
      FLANGER->hide();
      FLANGER->end();
    } // FlangerGui* FLANGER
    { REVERB = new ReverbGui(480, 413, 158, 184);
      REVERB->box(FL_UP_BOX);
      REVERB->color(FL_FOREGROUND_COLOR);
      REVERB->selection_color(FL_FOREGROUND_COLOR);
      REVERB->labeltype(FL_NORMAL_LABEL);
      REVERB->labelfont(1);
      REVERB->labelsize(14);
      REVERB->labelcolor(FL_FOREGROUND_COLOR);
      REVERB->user_data((void*)(1));
      REVERB->align(Fl_Align(96|FL_ALIGN_INSIDE));
      REVERB->when(FL_WHEN_RELEASE);
      REVERB->hide();
      REVERB->end();
    } // ReverbGui* REVERB
    { PEQ = new PeqGui(639, 413, 158, 184);
      PEQ->box(FL_UP_BOX);
      PEQ->color(FL_FOREGROUND_COLOR);
      PEQ->selection_color(FL_FOREGROUND_COLOR);
      PEQ->labeltype(FL_NORMAL_LABEL);
      PEQ->labelfont(1);
      PEQ->labelsize(14);
      PEQ->labelcolor(FL_FOREGROUND_COLOR);
      PEQ->user_data((void*)(1));
      PEQ->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PEQ->when(FL_WHEN_RELEASE);
      PEQ->hide();
      PEQ->end();
    } // PeqGui* PEQ
    { WHAWHA = new WhawhaGui(2, 212, 158, 184);
      WHAWHA->box(FL_UP_BOX);
      WHAWHA->color(FL_FOREGROUND_COLOR);
      WHAWHA->selection_color(FL_FOREGROUND_COLOR);
      WHAWHA->labeltype(FL_NORMAL_LABEL);
      WHAWHA->labelfont(1);
      WHAWHA->labelsize(14);
      WHAWHA->labelcolor(FL_FOREGROUND_COLOR);
      WHAWHA->user_data((void*)(1));
      WHAWHA->align(Fl_Align(96|FL_ALIGN_INSIDE));
      WHAWHA->when(FL_WHEN_RELEASE);
      WHAWHA->hide();
      WHAWHA->end();
    } // WhawhaGui* WHAWHA
    { ALIENWAH = new AlienwahGui(161, 212, 158, 184);
      ALIENWAH->box(FL_UP_BOX);
      ALIENWAH->color(FL_FOREGROUND_COLOR);
      ALIENWAH->selection_color(FL_FOREGROUND_COLOR);
      ALIENWAH->labeltype(FL_NORMAL_LABEL);
      ALIENWAH->labelfont(1);
      ALIENWAH->labelsize(14);
      ALIENWAH->labelcolor(FL_FOREGROUND_COLOR);
      ALIENWAH->user_data((void*)(1));
      ALIENWAH->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ALIENWAH->when(FL_WHEN_RELEASE);
      ALIENWAH->hide();
      ALIENWAH->end();
    } // AlienwahGui* ALIENWAH
    { CABINET = new CabinetGui(320, 212, 158, 184);
      CABINET->box(FL_UP_BOX);
      CABINET->color(FL_FOREGROUND_COLOR);
      CABINET->selection_color(FL_FOREGROUND_COLOR);
      CABINET->labeltype(FL_NORMAL_LABEL);
      CABINET->labelfont(1);
      CABINET->labelsize(14);
      CABINET->labelcolor(FL_FOREGROUND_COLOR);
      CABINET->user_data((void*)(1));
      CABINET->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CABINET->when(FL_WHEN_RELEASE);
      CABINET->hide();
      CABINET->end();
    } // CabinetGui* CABINET
    { PAN = new PanGui(480, 212, 158, 184);
      PAN->box(FL_UP_BOX);
      PAN->color(FL_FOREGROUND_COLOR);
      PAN->selection_color(FL_FOREGROUND_COLOR);
      PAN->labeltype(FL_NORMAL_LABEL);
      PAN->labelfont(1);
      PAN->labelsize(14);
      PAN->labelcolor(FL_FOREGROUND_COLOR);
      PAN->user_data((void*)(1));
      PAN->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PAN->when(FL_WHEN_RELEASE);
      PAN->hide();
      PAN->end();
    } // PanGui* PAN
    { HAR = new HarGui(639, 212, 158, 184);
      HAR->box(FL_UP_BOX);
      HAR->color(FL_FOREGROUND_COLOR);
      HAR->selection_color(FL_FOREGROUND_COLOR);
      HAR->labeltype(FL_NORMAL_LABEL);
      HAR->labelfont(1);
      HAR->labelsize(14);
      HAR->labelcolor(FL_FOREGROUND_COLOR);
      HAR->user_data((void*)(1));
      HAR->align(Fl_Align(96|FL_ALIGN_INSIDE));
      HAR->when(FL_WHEN_RELEASE);
      HAR->hide();
      HAR->end();
    } // HarGui* HAR
    { MUSDELAY = new MusdelayGui(2, 413, 158, 184);
      MUSDELAY->box(FL_UP_BOX);
      MUSDELAY->color(FL_FOREGROUND_COLOR);
      MUSDELAY->selection_color(FL_FOREGROUND_COLOR);
      MUSDELAY->labeltype(FL_NORMAL_LABEL);
      MUSDELAY->labelfont(1);
      MUSDELAY->labelsize(14);
      MUSDELAY->labelcolor(FL_FOREGROUND_COLOR);
      MUSDELAY->user_data((void*)(1));
      MUSDELAY->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MUSDELAY->when(FL_WHEN_RELEASE);
      MUSDELAY->hide();
      MUSDELAY->end();
    } // MusdelayGui* MUSDELAY
    { GATE = new GateGui(161, 413, 158, 184);
      GATE->box(FL_UP_BOX);
      GATE->color(FL_FOREGROUND_COLOR);
      GATE->selection_color(FL_FOREGROUND_COLOR);
      GATE->labeltype(FL_NORMAL_LABEL);
      GATE->labelfont(1);
      GATE->labelsize(14);
      GATE->labelcolor(FL_FOREGROUND_COLOR);
      GATE->user_data((void*)(1));
      GATE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      GATE->when(FL_WHEN_RELEASE);
      GATE->hide();
      GATE->end();
    } // GateGui* GATE
    { DERELICT = new DerelictGui(321, 413, 158, 184);
      DERELICT->box(FL_UP_BOX);
      DERELICT->color(FL_FOREGROUND_COLOR);
      DERELICT->selection_color(FL_FOREGROUND_COLOR);
      DERELICT->labeltype(FL_NORMAL_LABEL);
      DERELICT->labelfont(1);
      DERELICT->labelsize(14);
      DERELICT->labelcolor(FL_FOREGROUND_COLOR);
      DERELICT->user_data((void*)(1));
      DERELICT->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DERELICT->when(FL_WHEN_RELEASE);
      DERELICT->hide();
      DERELICT->end();
    } // DerelictGui* DERELICT
    { APHASER = new AphaserGui(480, 413, 158, 184);
      APHASER->box(FL_UP_BOX);
      APHASER->color(FL_FOREGROUND_COLOR);
      APHASER->selection_color(FL_FOREGROUND_COLOR);
      APHASER->labeltype(FL_NORMAL_LABEL);
      APHASER->labelfont(1);
      APHASER->labelsize(14);
      APHASER->labelcolor(FL_FOREGROUND_COLOR);
      APHASER->user_data((void*)(1));
      APHASER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      APHASER->when(FL_WHEN_RELEASE);
      APHASER->hide();
      APHASER->end();
    } // AphaserGui* APHASER
    { VALVE = new ValveGui(639, 413, 158, 184);
      VALVE->box(FL_UP_BOX);
      VALVE->color(FL_FOREGROUND_COLOR);
      VALVE->selection_color(FL_FOREGROUND_COLOR);
      VALVE->labeltype(FL_NORMAL_LABEL);
      VALVE->labelfont(1);
      VALVE->labelsize(14);
      VALVE->labelcolor(FL_FOREGROUND_COLOR);
      VALVE->user_data((void*)(1));
      VALVE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VALVE->when(FL_WHEN_RELEASE);
      VALVE->hide();
      VALVE->end();
    } // ValveGui* VALVE
    { DFLANGE = new DflangeGui(2, 212, 158, 184);
      DFLANGE->box(FL_UP_BOX);
      DFLANGE->color(FL_FOREGROUND_COLOR);
      DFLANGE->selection_color(FL_FOREGROUND_COLOR);
      DFLANGE->labeltype(FL_NORMAL_LABEL);
      DFLANGE->labelfont(1);
      DFLANGE->labelsize(14);
      DFLANGE->labelcolor(FL_FOREGROUND_COLOR);
      DFLANGE->user_data((void*)(1));
      DFLANGE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DFLANGE->when(FL_WHEN_RELEASE);
      DFLANGE->hide();
      DFLANGE->end();
    } // DflangeGui* DFLANGE
    { RING = new RingGui(161, 212, 158, 184);
      RING->box(FL_UP_BOX);
      RING->color(FL_FOREGROUND_COLOR);
      RING->selection_color(FL_FOREGROUND_COLOR);
      RING->labeltype(FL_NORMAL_LABEL);
      RING->labelfont(1);
      RING->labelsize(14);
      RING->labelcolor(FL_FOREGROUND_COLOR);
      RING->user_data((void*)(1));
      RING->align(Fl_Align(96|FL_ALIGN_INSIDE));
      RING->when(FL_WHEN_RELEASE);
      RING->hide();
      RING->end();
    } // RingGui* RING
    { EXCITER = new ExciterGui(320, 212, 158, 184);
      EXCITER->box(FL_UP_BOX);
      EXCITER->color(FL_FOREGROUND_COLOR);
      EXCITER->selection_color(FL_FOREGROUND_COLOR);
      EXCITER->labeltype(FL_NORMAL_LABEL);
      EXCITER->labelfont(1);
      EXCITER->labelsize(14);
      EXCITER->labelcolor(FL_FOREGROUND_COLOR);
      EXCITER->user_data((void*)(1));
      EXCITER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EXCITER->when(FL_WHEN_RELEASE);
      EXCITER->hide();
      EXCITER->end();
    } // ExciterGui* EXCITER
    { DISTBAND = new DistBandGui(480, 212, 158, 184);
      DISTBAND->box(FL_UP_BOX);
      DISTBAND->color(FL_FOREGROUND_COLOR);
      DISTBAND->selection_color(FL_FOREGROUND_COLOR);
      DISTBAND->labeltype(FL_NORMAL_LABEL);
      DISTBAND->labelfont(1);
      DISTBAND->labelsize(14);
      DISTBAND->labelcolor(FL_FOREGROUND_COLOR);
      DISTBAND->user_data((void*)(1));
      DISTBAND->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DISTBAND->when(FL_WHEN_RELEASE);
      DISTBAND->hide();
      DISTBAND->end();
    } // DistBandGui* DISTBAND
    { ARPIE = new ArpieGui(639, 212, 158, 184);
      ARPIE->box(FL_UP_BOX);
      ARPIE->color(FL_FOREGROUND_COLOR);
      ARPIE->selection_color(FL_FOREGROUND_COLOR);
      ARPIE->labeltype(FL_NORMAL_LABEL);
      ARPIE->labelfont(1);
      ARPIE->labelsize(14);
      ARPIE->labelcolor(FL_FOREGROUND_COLOR);
      ARPIE->user_data((void*)(1));
      ARPIE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ARPIE->when(FL_WHEN_RELEASE);
      ARPIE->hide();
      ARPIE->end();
    } // ArpieGui* ARPIE
    { EXPANDER = new ExpanderGui(2, 413, 158, 184);
      EXPANDER->box(FL_UP_BOX);
      EXPANDER->color(FL_FOREGROUND_COLOR);
      EXPANDER->selection_color(FL_FOREGROUND_COLOR);
      EXPANDER->labeltype(FL_NORMAL_LABEL);
      EXPANDER->labelfont(1);
      EXPANDER->labelsize(14);
      EXPANDER->labelcolor(FL_FOREGROUND_COLOR);
      EXPANDER->user_data((void*)(1));
      EXPANDER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EXPANDER->when(FL_WHEN_RELEASE);
      EXPANDER->hide();
      EXPANDER->end();
    } // ExpanderGui* EXPANDER
    { SHUFFLE = new ShuffleGui(161, 413, 158, 184);
      SHUFFLE->box(FL_UP_BOX);
      SHUFFLE->color(FL_FOREGROUND_COLOR);
      SHUFFLE->selection_color(FL_FOREGROUND_COLOR);
      SHUFFLE->labeltype(FL_NORMAL_LABEL);
      SHUFFLE->labelfont(1);
      SHUFFLE->labelsize(14);
      SHUFFLE->labelcolor(FL_FOREGROUND_COLOR);
      SHUFFLE->user_data((void*)(1));
      SHUFFLE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHUFFLE->when(FL_WHEN_RELEASE);
      SHUFFLE->hide();
      SHUFFLE->end();
    } // ShuffleGui* SHUFFLE
    { SYNTHFILTER = new SynthfilterGui(321, 413, 158, 184);
      SYNTHFILTER->box(FL_UP_BOX);
      SYNTHFILTER->color(FL_FOREGROUND_COLOR);
      SYNTHFILTER->selection_color(FL_FOREGROUND_COLOR);
      SYNTHFILTER->labeltype(FL_NORMAL_LABEL);
      SYNTHFILTER->labelfont(1);
      SYNTHFILTER->labelsize(14);
      SYNTHFILTER->labelcolor(FL_FOREGROUND_COLOR);
      SYNTHFILTER->user_data((void*)(1));
      SYNTHFILTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SYNTHFILTER->when(FL_WHEN_RELEASE);
      SYNTHFILTER->hide();
      SYNTHFILTER->end();
    } // SynthfilterGui* SYNTHFILTER
    { VARYBAND = new VarybandGui(480, 413, 158, 184);
      VARYBAND->box(FL_UP_BOX);
      VARYBAND->color(FL_FOREGROUND_COLOR);
      VARYBAND->selection_color(FL_FOREGROUND_COLOR);
      VARYBAND->labeltype(FL_NORMAL_LABEL);
      VARYBAND->labelfont(1);
      VARYBAND->labelsize(14);
      VARYBAND->labelcolor(FL_FOREGROUND_COLOR);
      VARYBAND->user_data((void*)(1));
      VARYBAND->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VARYBAND->when(FL_WHEN_RELEASE);
      VARYBAND->hide();
      VARYBAND->end();
    } // VarybandGui* VARYBAND
    { CONVOLOTRON = new ConvoGui(639, 413, 158, 184);
      CONVOLOTRON->box(FL_UP_BOX);
      CONVOLOTRON->color(FL_FOREGROUND_COLOR);
      CONVOLOTRON->selection_color(FL_FOREGROUND_COLOR);
      CONVOLOTRON->labeltype(FL_NORMAL_LABEL);
      CONVOLOTRON->labelfont(1);
      CONVOLOTRON->labelsize(14);
      CONVOLOTRON->labelcolor(FL_FOREGROUND_COLOR);
      CONVOLOTRON->user_data((void*)(1));
      CONVOLOTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CONVOLOTRON->when(FL_WHEN_RELEASE);
      CONVOLOTRON->hide();
      CONVOLOTRON->end();
    } // ConvoGui* CONVOLOTRON
    { LOOPER = new LooperGui(2, 212, 158, 184);
      LOOPER->box(FL_UP_BOX);
      LOOPER->color(FL_FOREGROUND_COLOR);
      LOOPER->selection_color(FL_FOREGROUND_COLOR);
      LOOPER->labeltype(FL_NORMAL_LABEL);
      LOOPER->labelfont(1);
      LOOPER->labelsize(14);
      LOOPER->labelcolor(FL_FOREGROUND_COLOR);
      LOOPER->user_data((void*)(1));
      LOOPER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      LOOPER->when(FL_WHEN_RELEASE);
      LOOPER->hide();
      LOOPER->end();
    } // LooperGui* LOOPER
    { MUTROMOJO = new MutromojoGui(161, 212, 158, 184);
      MUTROMOJO->box(FL_UP_BOX);
      MUTROMOJO->color(FL_FOREGROUND_COLOR);
      MUTROMOJO->selection_color(FL_FOREGROUND_COLOR);
      MUTROMOJO->labeltype(FL_NORMAL_LABEL);
      MUTROMOJO->labelfont(1);
      MUTROMOJO->labelsize(14);
      MUTROMOJO->labelcolor(FL_FOREGROUND_COLOR);
      MUTROMOJO->user_data((void*)(1));
      MUTROMOJO->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MUTROMOJO->when(FL_WHEN_RELEASE);
      MUTROMOJO->hide();
      MUTROMOJO->end();
    } // MutromojoGui* MUTROMOJO
    { ECHOVERSE = new EchoverseGui(320, 212, 158, 184);
      ECHOVERSE->box(FL_UP_BOX);
      ECHOVERSE->color(FL_FOREGROUND_COLOR);
      ECHOVERSE->selection_color(FL_FOREGROUND_COLOR);
      ECHOVERSE->labeltype(FL_NORMAL_LABEL);
      ECHOVERSE->labelfont(1);
      ECHOVERSE->labelsize(14);
      ECHOVERSE->labelcolor(FL_FOREGROUND_COLOR);
      ECHOVERSE->user_data((void*)(1));
      ECHOVERSE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ECHOVERSE->when(FL_WHEN_RELEASE);
      ECHOVERSE->hide();
      ECHOVERSE->end();
    } // EchoverseGui* ECHOVERSE
    { COILCRAFTER = new CoilGui(480, 212, 158, 184);
      COILCRAFTER->box(FL_UP_BOX);
      COILCRAFTER->color(FL_FOREGROUND_COLOR);
      COILCRAFTER->selection_color(FL_FOREGROUND_COLOR);
      COILCRAFTER->labeltype(FL_NORMAL_LABEL);
      COILCRAFTER->labelfont(1);
      COILCRAFTER->labelsize(14);
      COILCRAFTER->labelcolor(FL_FOREGROUND_COLOR);
      COILCRAFTER->user_data((void*)(1));
      COILCRAFTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COILCRAFTER->when(FL_WHEN_RELEASE);
      COILCRAFTER->hide();
      COILCRAFTER->end();
    } // CoilGui* COILCRAFTER
    { SHELFBOOST = new ShelfGui(639, 212, 158, 184);
      SHELFBOOST->box(FL_UP_BOX);
      SHELFBOOST->color(FL_FOREGROUND_COLOR);
      SHELFBOOST->selection_color(FL_FOREGROUND_COLOR);
      SHELFBOOST->labeltype(FL_NORMAL_LABEL);
      SHELFBOOST->labelfont(1);
      SHELFBOOST->labelsize(14);
      SHELFBOOST->labelcolor(FL_FOREGROUND_COLOR);
      SHELFBOOST->user_data((void*)(1));
      SHELFBOOST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHELFBOOST->when(FL_WHEN_RELEASE);
      SHELFBOOST->hide();
      SHELFBOOST->end();
    } // ShelfGui* SHELFBOOST
    { VOCODER = new VocoderGui(2, 413, 158, 184);
      VOCODER->box(FL_UP_BOX);
      VOCODER->color(FL_FOREGROUND_COLOR);
      VOCODER->selection_color(FL_FOREGROUND_COLOR);
      VOCODER->labeltype(FL_NORMAL_LABEL);
      VOCODER->labelfont(1);
      VOCODER->labelsize(14);
      VOCODER->labelcolor(FL_FOREGROUND_COLOR);
      VOCODER->user_data((void*)(1));
      VOCODER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VOCODER->when(FL_WHEN_RELEASE);
      VOCODER->hide();
      VOCODER->end();
    } // VocoderGui* VOCODER
    { SUSTAINER = new SustainGui(161, 413, 158, 184);
      SUSTAINER->box(FL_UP_BOX);
      SUSTAINER->color(FL_FOREGROUND_COLOR);
      SUSTAINER->selection_color(FL_FOREGROUND_COLOR);
      SUSTAINER->labeltype(FL_NORMAL_LABEL);
      SUSTAINER->labelfont(1);
      SUSTAINER->labelsize(14);
      SUSTAINER->labelcolor(FL_FOREGROUND_COLOR);
      SUSTAINER->user_data((void*)(1));
      SUSTAINER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SUSTAINER->when(FL_WHEN_RELEASE);
      SUSTAINER->hide();
      SUSTAINER->end();
    } // SustainGui* SUSTAINER
    { SEQUENCE = new SequenceGui(321, 413, 158, 184);
      SEQUENCE->box(FL_UP_BOX);
      SEQUENCE->color(FL_FOREGROUND_COLOR);
      SEQUENCE->selection_color(FL_FOREGROUND_COLOR);
      SEQUENCE->labeltype(FL_NORMAL_LABEL);
      SEQUENCE->labelfont(1);
      SEQUENCE->labelsize(14);
      SEQUENCE->labelcolor(FL_FOREGROUND_COLOR);
      SEQUENCE->user_data((void*)(1));
      SEQUENCE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SEQUENCE->when(FL_WHEN_RELEASE);
      SEQUENCE->hide();
      SEQUENCE->end();
    } // SequenceGui* SEQUENCE
    { SHIFTER = new ShifterGui(480, 413, 158, 184);
      SHIFTER->box(FL_UP_BOX);
      SHIFTER->color(FL_FOREGROUND_COLOR);
      SHIFTER->selection_color(FL_FOREGROUND_COLOR);
      SHIFTER->labeltype(FL_NORMAL_LABEL);
      SHIFTER->labelfont(1);
      SHIFTER->labelsize(14);
      SHIFTER->labelcolor(FL_FOREGROUND_COLOR);
      SHIFTER->user_data((void*)(1));
      SHIFTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHIFTER->when(FL_WHEN_RELEASE);
      SHIFTER->hide();
      SHIFTER->end();
    } // ShifterGui* SHIFTER
    { STOMPBOX = new StompboxGui(639, 413, 158, 184);
      STOMPBOX->box(FL_UP_BOX);
      STOMPBOX->color(FL_FOREGROUND_COLOR);
      STOMPBOX->selection_color(FL_FOREGROUND_COLOR);
      STOMPBOX->labeltype(FL_NORMAL_LABEL);
      STOMPBOX->labelfont(1);
      STOMPBOX->labelsize(14);
      STOMPBOX->labelcolor(FL_FOREGROUND_COLOR);
      STOMPBOX->user_data((void*)(1));
      STOMPBOX->align(Fl_Align(96|FL_ALIGN_INSIDE));
      STOMPBOX->when(FL_WHEN_RELEASE);
      STOMPBOX->hide();
      STOMPBOX->end();
    } // StompboxGui* STOMPBOX
    { REVERBTRON = new RevtronGui(2, 212, 158, 184);
      REVERBTRON->box(FL_UP_BOX);
      REVERBTRON->color(FL_FOREGROUND_COLOR);
      REVERBTRON->selection_color(FL_FOREGROUND_COLOR);
      REVERBTRON->labeltype(FL_NORMAL_LABEL);
      REVERBTRON->labelfont(1);
      REVERBTRON->labelsize(14);
      REVERBTRON->labelcolor(FL_FOREGROUND_COLOR);
      REVERBTRON->user_data((void*)(1));
      REVERBTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      REVERBTRON->when(FL_WHEN_RELEASE);
      REVERBTRON->hide();
      REVERBTRON->end();
    } // RevtronGui* REVERBTRON
    { ECHOTRON = new EchotronGui(161, 212, 158, 184);
      ECHOTRON->box(FL_UP_BOX);
      ECHOTRON->color(FL_FOREGROUND_COLOR);
      ECHOTRON->selection_color(FL_FOREGROUND_COLOR);
      ECHOTRON->labeltype(FL_NORMAL_LABEL);
      ECHOTRON->labelfont(1);
      ECHOTRON->labelsize(14);
      ECHOTRON->labelcolor(FL_FOREGROUND_COLOR);
      ECHOTRON->user_data((void*)(1));
      ECHOTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ECHOTRON->when(FL_WHEN_RELEASE);
      ECHOTRON->hide();
      ECHOTRON->end();
    } // EchotronGui* ECHOTRON
    { SHAR = new SharGui(320, 212, 158, 184);
      SHAR->box(FL_UP_BOX);
      SHAR->color(FL_FOREGROUND_COLOR);
      SHAR->selection_color(FL_FOREGROUND_COLOR);
      SHAR->labeltype(FL_NORMAL_LABEL);
      SHAR->labelfont(1);
      SHAR->labelsize(14);
      SHAR->labelcolor(FL_FOREGROUND_COLOR);
      SHAR->user_data((void*)(1));
      SHAR->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHAR->when(FL_WHEN_RELEASE);
      SHAR->hide();
      SHAR->end();
    } // SharGui* SHAR
    { COMPBAND = new CbandGui(480, 212, 158, 184);
      COMPBAND->box(FL_UP_BOX);
      COMPBAND->color(FL_FOREGROUND_COLOR);
      COMPBAND->selection_color(FL_FOREGROUND_COLOR);
      COMPBAND->labeltype(FL_NORMAL_LABEL);
      COMPBAND->labelfont(1);
      COMPBAND->labelsize(14);
      COMPBAND->labelcolor(FL_FOREGROUND_COLOR);
      COMPBAND->user_data((void*)(1));
      COMPBAND->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COMPBAND->when(FL_WHEN_RELEASE);
      COMPBAND->hide();
      COMPBAND->end();
    } // CbandGui* COMPBAND
    { OTREM = new OtremGui(639, 212, 158, 184);
      OTREM->box(FL_UP_BOX);
      OTREM->color(FL_FOREGROUND_COLOR);
      OTREM->selection_color(FL_FOREGROUND_COLOR);
      OTREM->labeltype(FL_NORMAL_LABEL);
      OTREM->labelfont(1);
      OTREM->labelsize(14);
      OTREM->labelcolor(FL_FOREGROUND_COLOR);
      OTREM->user_data((void*)(1));
      OTREM->align(Fl_Align(96|FL_ALIGN_INSIDE));
      OTREM->when(FL_WHEN_RELEASE);
      OTREM->hide();
      OTREM->end();
    } // OtremGui* OTREM
    { VIBE = new VibeGui(2, 413, 158, 184);
      VIBE->box(FL_UP_BOX);
      VIBE->color(FL_FOREGROUND_COLOR);
      VIBE->selection_color(FL_FOREGROUND_COLOR);
      VIBE->labeltype(FL_NORMAL_LABEL);
      VIBE->labelfont(1);
      VIBE->labelsize(14);
      VIBE->labelcolor(FL_FOREGROUND_COLOR);
      VIBE->user_data((void*)(1));
      VIBE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VIBE->when(FL_WHEN_RELEASE);
      VIBE->hide();
      VIBE->end();
    } // VibeGui* VIBE
    { INFINIT = new InfinityGui(161, 413, 158, 184);
      INFINIT->box(FL_UP_BOX);
      INFINIT->color(FL_FOREGROUND_COLOR);
      INFINIT->selection_color(FL_FOREGROUND_COLOR);
      INFINIT->labeltype(FL_NORMAL_LABEL);
      INFINIT->labelfont(1);
      INFINIT->labelsize(14);
      INFINIT->labelcolor(FL_FOREGROUND_COLOR);
      INFINIT->user_data((void*)(1));
      INFINIT->align(Fl_Align(96|FL_ALIGN_INSIDE));
      INFINIT->when(FL_WHEN_RELEASE);
      INFINIT->hide();
      INFINIT->end();
    } // InfinityGui* INFINIT
    { Tuner = new Fl_Group(520, 24, 276, 58);
      Tuner->box(FL_UP_BOX);
      Tuner->color(FL_FOREGROUND_COLOR);
      Tuner->selection_color(FL_FOREGROUND_COLOR);
      Tuner->user_data((void*)(1));
      Tuner->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { tuner_activar = new RKR_Light_Button(526, 28, 38, 18, "On");
        tuner_activar->tooltip("Enable Tuner - Shortcut \'T\'");
        tuner_activar->box(FL_UP_BOX);
        tuner_activar->shortcut(0x74);
        tuner_activar->color((Fl_Color)62);
        tuner_activar->selection_color((Fl_Color)1);
        tuner_activar->labeltype(FL_NORMAL_LABEL);
        tuner_activar->labelfont(0);
        tuner_activar->labelsize(10);
        tuner_activar->labelcolor(FL_FOREGROUND_COLOR);
        tuner_activar->callback((Fl_Callback*)cb_tuner_activar, (void*)(2));
        tuner_activar->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        tuner_activar->when(FL_WHEN_CHANGED);
      } // RKR_Light_Button* tuner_activar
      { TunerBar* o = tuner_bar = new TunerBar(586, 31, 205, 14);
        tuner_bar->box(FL_THIN_DOWN_BOX);
        tuner_bar->color(FL_DARK1);
        tuner_bar->selection_color(FL_RED);
        tuner_bar->labeltype(FL_NORMAL_LABEL);
        tuner_bar->labelfont(0);
        tuner_bar->labelsize(14);
        tuner_bar->labelcolor(FL_FOREGROUND_COLOR);
        tuner_bar->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        tuner_bar->when(FL_WHEN_RELEASE);
        o->minimum(-32);
        o->maximum(32);
        o->value(-32);
      } // TunerBar* tuner_bar
      { WNote = new RKR_Box(676, 57, 28, 22);
        WNote->box(FL_NO_BOX);
        WNote->color(FL_BACKGROUND_COLOR);
        WNote->selection_color(FL_BACKGROUND_COLOR);
        WNote->labeltype(FL_NORMAL_LABEL);
        WNote->labelfont(1);
        WNote->labelsize(14);
        WNote->labelcolor(FL_BACKGROUND2_COLOR);
        WNote->user_data((void*)(7));
        WNote->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        WNote->when(FL_WHEN_RELEASE);
      } // RKR_Box* WNote
      { WRfreq = new RKR_Box(588, 57, 76, 22);
        WRfreq->box(FL_NO_BOX);
        WRfreq->color(FL_BACKGROUND_COLOR);
        WRfreq->selection_color(FL_BACKGROUND_COLOR);
        WRfreq->labeltype(FL_NORMAL_LABEL);
        WRfreq->labelfont(1);
        WRfreq->labelsize(14);
        WRfreq->labelcolor(FL_BACKGROUND2_COLOR);
        WRfreq->user_data((void*)(7));
        WRfreq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        WRfreq->when(FL_WHEN_RELEASE);
      } // RKR_Box* WRfreq
      { WNfreq = new RKR_Box(714, 57, 76, 22);
        WNfreq->box(FL_NO_BOX);
        WNfreq->color(FL_BACKGROUND_COLOR);
        WNfreq->selection_color(FL_BACKGROUND_COLOR);
        WNfreq->labeltype(FL_NORMAL_LABEL);
        WNfreq->labelfont(1);
        WNfreq->labelsize(14);
        WNfreq->labelcolor(FL_BACKGROUND2_COLOR);
        WNfreq->user_data((void*)(7));
        WNfreq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        WNfreq->when(FL_WHEN_RELEASE);
      } // RKR_Box* WNfreq
      { PINCHO = new Fl_Box(673, 48, 32, 5, "@-4$8<");
        PINCHO->box(FL_FLAT_BOX);
        PINCHO->color((Fl_Color)55);
        PINCHO->labelcolor((Fl_Color)4);
        PINCHO->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* PINCHO
      { TUNER_LABEL = new RKR_Box(524, 63, 57, 14, "Tuner");
        TUNER_LABEL->box(FL_NO_BOX);
        TUNER_LABEL->color(FL_BACKGROUND_COLOR);
        TUNER_LABEL->selection_color(FL_BACKGROUND_COLOR);
        TUNER_LABEL->labeltype(FL_NORMAL_LABEL);
        TUNER_LABEL->labelfont(1);
        TUNER_LABEL->labelsize(14);
        TUNER_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        TUNER_LABEL->user_data((void*)(7));
        TUNER_LABEL->align(Fl_Align(FL_ALIGN_CENTER));
        TUNER_LABEL->when(FL_WHEN_RELEASE);
      } // RKR_Box* TUNER_LABEL
      Tuner->end();
    } // Fl_Group* Tuner
    { InOut = new Fl_Group(2, 24, 164, 170);
      InOut->box(FL_UP_BOX);
      InOut->color(FL_FOREGROUND_COLOR);
      InOut->selection_color(FL_FOREGROUND_COLOR);
      InOut->user_data((void*)(1));
      InOut->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { ActivarGeneral = new RKR_Light_Button(6, 30, 52, 18, "FX On");
        ActivarGeneral->tooltip("Enable rakarrack - Shortcut \'R\'");
        ActivarGeneral->box(FL_UP_BOX);
        ActivarGeneral->shortcut(0x72);
        ActivarGeneral->down_box(FL_BORDER_BOX);
        ActivarGeneral->color((Fl_Color)62);
        ActivarGeneral->selection_color((Fl_Color)1);
        ActivarGeneral->labeltype(FL_NORMAL_LABEL);
        ActivarGeneral->labelfont(0);
        ActivarGeneral->labelsize(10);
        ActivarGeneral->labelcolor(FL_FOREGROUND_COLOR);
        ActivarGeneral->callback((Fl_Callback*)cb_ActivarGeneral, (void*)(2));
        ActivarGeneral->align(Fl_Align(68|FL_ALIGN_INSIDE));
        ActivarGeneral->when(FL_WHEN_CHANGED);
      } // RKR_Light_Button* ActivarGeneral
      { RKR_Button* o = BostBut = new RKR_Button(132, 30, 30, 14, "+10dB");
        BostBut->tooltip("+10 dB Booster - Shortcut \'F10\'");
        BostBut->type(1);
        BostBut->box(FL_UP_BOX);
        BostBut->shortcut(0xffc7);
        BostBut->color((Fl_Color)62);
        BostBut->selection_color(FL_BACKGROUND_COLOR);
        BostBut->labeltype(FL_NORMAL_LABEL);
        BostBut->labelfont(0);
        BostBut->labelsize(6);
        BostBut->labelcolor(FL_FOREGROUND_COLOR);
        BostBut->callback((Fl_Callback*)cb_BostBut, (void*)(78));
        BostBut->align(Fl_Align(FL_ALIGN_CENTER));
        BostBut->when(FL_WHEN_RELEASE);
        o->set_label_offset(-4);
      } // RKR_Button* BostBut
      { Balance = new RKR_Slider(15, 48, 19, 126, "FX%");
        Balance->type(4);
        Balance->box(FL_FLAT_BOX);
        Balance->color(FL_FOREGROUND_COLOR);
        Balance->selection_color(FL_FOREGROUND_COLOR);
        Balance->labeltype(FL_NORMAL_LABEL);
        Balance->labelfont(0);
        Balance->labelsize(10);
        Balance->labelcolor((Fl_Color)31);
        Balance->minimum(100);
        Balance->maximum(0);
        Balance->step(1);
        Balance->value(100);
        Balance->textcolor(FL_BACKGROUND2_COLOR);
        Balance->callback((Fl_Callback*)cb_Balance);
        Balance->align(Fl_Align(FL_ALIGN_BOTTOM));
        Balance->when(FL_WHEN_CHANGED);
      } // RKR_Slider* Balance
      { Nivel_Entrada = new RKR_Slider(57, 48, 19, 126, "Input");
        Nivel_Entrada->type(4);
        Nivel_Entrada->box(FL_FLAT_BOX);
        Nivel_Entrada->color(FL_FOREGROUND_COLOR);
        Nivel_Entrada->selection_color(FL_FOREGROUND_COLOR);
        Nivel_Entrada->labeltype(FL_NORMAL_LABEL);
        Nivel_Entrada->labelfont(0);
        Nivel_Entrada->labelsize(10);
        Nivel_Entrada->labelcolor((Fl_Color)31);
        Nivel_Entrada->minimum(50);
        Nivel_Entrada->maximum(-50);
        Nivel_Entrada->step(1);
        Nivel_Entrada->textcolor(FL_BACKGROUND2_COLOR);
        Nivel_Entrada->callback((Fl_Callback*)cb_Nivel_Entrada);
        Nivel_Entrada->align(Fl_Align(FL_ALIGN_BOTTOM));
        Nivel_Entrada->when(FL_WHEN_CHANGED);
      } // RKR_Slider* Nivel_Entrada
      { Nivel_Salida = new RKR_Slider(115, 48, 19, 126, "Output");
        Nivel_Salida->tooltip("Shortcut \'F2\' decrease volume, \'F3\' Increase volume");
        Nivel_Salida->type(4);
        Nivel_Salida->box(FL_FLAT_BOX);
        Nivel_Salida->color(FL_FOREGROUND_COLOR);
        Nivel_Salida->selection_color(FL_FOREGROUND_COLOR);
        Nivel_Salida->labeltype(FL_NORMAL_LABEL);
        Nivel_Salida->labelfont(0);
        Nivel_Salida->labelsize(10);
        Nivel_Salida->labelcolor((Fl_Color)31);
        Nivel_Salida->minimum(50);
        Nivel_Salida->maximum(-50);
        Nivel_Salida->step(1);
        Nivel_Salida->textcolor(FL_BACKGROUND2_COLOR);
        Nivel_Salida->callback((Fl_Callback*)cb_Nivel_Salida);
        Nivel_Salida->align(Fl_Align(FL_ALIGN_BOTTOM));
        Nivel_Salida->when(FL_WHEN_CHANGED);
      } // RKR_Slider* Nivel_Salida
      { input_vul = new NewVum(84, 50, 8, 122);
        input_vul->type(2);
        input_vul->box(FL_NO_BOX);
        input_vul->color((Fl_Color)178);
        input_vul->selection_color((Fl_Color)90);
        input_vul->labeltype(FL_NORMAL_LABEL);
        input_vul->labelfont(0);
        input_vul->labelsize(14);
        input_vul->labelcolor(FL_FOREGROUND_COLOR);
        input_vul->minimum(15);
        input_vul->maximum(-48);
        input_vul->step(1);
        input_vul->value(-48);
        input_vul->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        input_vul->when(FL_WHEN_NEVER);
      } // NewVum* input_vul
      { input_vur = new NewVum(93, 50, 8, 122);
        input_vur->type(2);
        input_vur->box(FL_NO_BOX);
        input_vur->color((Fl_Color)178);
        input_vur->selection_color((Fl_Color)90);
        input_vur->labeltype(FL_NORMAL_LABEL);
        input_vur->labelfont(0);
        input_vur->labelsize(14);
        input_vur->labelcolor(FL_FOREGROUND_COLOR);
        input_vur->minimum(15);
        input_vur->maximum(-48);
        input_vur->step(1);
        input_vur->value(-48);
        input_vur->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        input_vur->when(FL_WHEN_NEVER);
      } // NewVum* input_vur
      { output_vul = new NewVum(142, 50, 8, 122);
        output_vul->type(2);
        output_vul->box(FL_NO_BOX);
        output_vul->color((Fl_Color)178);
        output_vul->selection_color((Fl_Color)90);
        output_vul->labeltype(FL_NORMAL_LABEL);
        output_vul->labelfont(0);
        output_vul->labelsize(14);
        output_vul->labelcolor(FL_FOREGROUND_COLOR);
        output_vul->minimum(15);
        output_vul->maximum(-48);
        output_vul->step(1);
        output_vul->value(-48);
        output_vul->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        output_vul->when(FL_WHEN_NEVER);
      } // NewVum* output_vul
      { output_vur = new NewVum(151, 50, 8, 122);
        output_vur->type(2);
        output_vur->box(FL_NO_BOX);
        output_vur->color((Fl_Color)178);
        output_vur->selection_color((Fl_Color)90);
        output_vur->labeltype(FL_NORMAL_LABEL);
        output_vur->labelfont(0);
        output_vur->labelsize(14);
        output_vur->labelcolor(FL_FOREGROUND_COLOR);
        output_vur->minimum(15);
        output_vur->maximum(-48);
        output_vur->step(1);
        output_vur->value(-48);
        output_vur->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        output_vur->when(FL_WHEN_NEVER);
      } // NewVum* output_vur
      { LABEL_IO = new RKR_Box(60, 30, 62, 14, "In/Out");
        LABEL_IO->box(FL_NO_BOX);
        LABEL_IO->color(FL_BACKGROUND_COLOR);
        LABEL_IO->selection_color(FL_BACKGROUND_COLOR);
        LABEL_IO->labeltype(FL_NORMAL_LABEL);
        LABEL_IO->labelfont(1);
        LABEL_IO->labelsize(14);
        LABEL_IO->labelcolor(FL_BACKGROUND2_COLOR);
        LABEL_IO->user_data((void*)(7));
        LABEL_IO->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        LABEL_IO->when(FL_WHEN_RELEASE);
      } // RKR_Box* LABEL_IO
      InOut->end();
    } // Fl_Group* InOut
    { MidiGui* o = MIDI = new MidiGui(520, 85, 276, 52);
      MIDI->box(FL_UP_BOX);
      MIDI->color(FL_FOREGROUND_COLOR);
      MIDI->selection_color(FL_FOREGROUND_COLOR);
      MIDI->labeltype(FL_NORMAL_LABEL);
      MIDI->labelfont(0);
      MIDI->labelsize(14);
      MIDI->labelcolor(FL_FOREGROUND_COLOR);
      MIDI->user_data((void*)(1));
      MIDI->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MIDI->when(FL_WHEN_RELEASE);
      MIDI->hide();
      o->initialize(rkr, this);
      MIDI->end();
    } // MidiGui* MIDI
    { Metro = new Fl_Group(520, 85, 276, 52);
      Metro->box(FL_UP_BOX);
      Metro->color(FL_FOREGROUND_COLOR);
      Metro->selection_color(FL_FOREGROUND_COLOR);
      Metro->user_data((void*)(1));
      Metro->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { metro_activar = new RKR_Light_Button(525, 89, 38, 18, "On");
        metro_activar->tooltip("Enable Metronome - Shortcut \'M\'");
        metro_activar->box(FL_UP_BOX);
        metro_activar->shortcut(0x6d);
        metro_activar->color((Fl_Color)62);
        metro_activar->selection_color((Fl_Color)1);
        metro_activar->labeltype(FL_NORMAL_LABEL);
        metro_activar->labelfont(0);
        metro_activar->labelsize(10);
        metro_activar->labelcolor(FL_FOREGROUND_COLOR);
        metro_activar->callback((Fl_Callback*)cb_metro_activar, (void*)(2));
        metro_activar->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        metro_activar->when(FL_WHEN_CHANGED);
      } // RKR_Light_Button* metro_activar
      { RKR_Choice* o = MetroBar = new RKR_Choice(624, 98, 37, 16, "Time Sig.");
        MetroBar->box(FL_FLAT_BOX);
        MetroBar->down_box(FL_BORDER_BOX);
        MetroBar->color(FL_BACKGROUND_COLOR);
        MetroBar->selection_color(FL_FOREGROUND_COLOR);
        MetroBar->labeltype(FL_NORMAL_LABEL);
        MetroBar->labelfont(0);
        MetroBar->labelsize(8);
        MetroBar->labelcolor(FL_BACKGROUND2_COLOR);
        MetroBar->textsize(10);
        MetroBar->textcolor(FL_BACKGROUND2_COLOR);
        MetroBar->callback((Fl_Callback*)cb_MetroBar, (void*)(12));
        MetroBar->align(Fl_Align(FL_ALIGN_LEFT));
        MetroBar->when(FL_WHEN_RELEASE);
        o->menu(m_looper_bar->get_time_sig());
        o->set_label_offset(-2);
        o->set_text_offset(-2);
      } // RKR_Choice* MetroBar
      { RKR_Slider* o = Metro_Volume = new RKR_Slider(667, 100, 117, 11, "Volume");
        Metro_Volume->type(5);
        Metro_Volume->box(FL_FLAT_BOX);
        Metro_Volume->color((Fl_Color)178);
        Metro_Volume->selection_color((Fl_Color)62);
        Metro_Volume->labeltype(FL_NORMAL_LABEL);
        Metro_Volume->labelfont(0);
        Metro_Volume->labelsize(8);
        Metro_Volume->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Volume->maximum(100);
        Metro_Volume->step(1);
        Metro_Volume->value(50);
        Metro_Volume->textcolor(FL_BACKGROUND2_COLOR);
        Metro_Volume->callback((Fl_Callback*)cb_Metro_Volume);
        Metro_Volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Metro_Volume->when(FL_WHEN_CHANGED);
        o->set_label_offset(-2);
        o->shut_off_pixel_adjustment();
      } // RKR_Slider* Metro_Volume
      { RKR_Choice* o = MetroSound = new RKR_Choice(634, 118, 28, 16, "S");
        MetroSound->box(FL_FLAT_BOX);
        MetroSound->down_box(FL_BORDER_BOX);
        MetroSound->color(FL_BACKGROUND_COLOR);
        MetroSound->selection_color(FL_FOREGROUND_COLOR);
        MetroSound->labeltype(FL_NORMAL_LABEL);
        MetroSound->labelfont(0);
        MetroSound->labelsize(8);
        MetroSound->labelcolor(FL_BACKGROUND2_COLOR);
        MetroSound->textsize(10);
        MetroSound->textcolor(FL_BACKGROUND2_COLOR);
        MetroSound->callback((Fl_Callback*)cb_MetroSound, (void*)(12));
        MetroSound->align(Fl_Align(FL_ALIGN_LEFT));
        MetroSound->when(FL_WHEN_RELEASE);
        o->menu(m_looper_ms->get_metronome_sound());
        o->set_label_offset(-2);
        o->set_text_offset(-1);
      } // RKR_Choice* MetroSound
      { RKR_Slider* o = Metro_Tempo = new RKR_Slider(667, 119, 117, 11, "Tempo");
        Metro_Tempo->type(5);
        Metro_Tempo->box(FL_FLAT_BOX);
        Metro_Tempo->color((Fl_Color)178);
        Metro_Tempo->selection_color((Fl_Color)62);
        Metro_Tempo->labeltype(FL_NORMAL_LABEL);
        Metro_Tempo->labelfont(0);
        Metro_Tempo->labelsize(8);
        Metro_Tempo->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Tempo->minimum(20);
        Metro_Tempo->maximum(340);
        Metro_Tempo->step(1);
        Metro_Tempo->value(100);
        Metro_Tempo->textcolor(FL_BACKGROUND2_COLOR);
        Metro_Tempo->callback((Fl_Callback*)cb_Metro_Tempo);
        Metro_Tempo->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Metro_Tempo->when(FL_WHEN_CHANGED);
        o->set_label_offset(-2);
        o->shut_off_pixel_adjustment();
      } // RKR_Slider* Metro_Tempo
      { Metro_Led = new Fl_Box(568, 90, 10, 10);
        Metro_Led->box(FL_ROUNDED_BOX);
        Metro_Led->color(FL_RED);
        Metro_Led->labelsize(18);
      } // Fl_Box* Metro_Led
      { Metro_Label = new RKR_Box(522, 117, 92, 14, "Metronome");
        Metro_Label->box(FL_NO_BOX);
        Metro_Label->color(FL_BACKGROUND_COLOR);
        Metro_Label->selection_color(FL_BACKGROUND_COLOR);
        Metro_Label->labeltype(FL_NORMAL_LABEL);
        Metro_Label->labelfont(1);
        Metro_Label->labelsize(14);
        Metro_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Label->user_data((void*)(7));
        Metro_Label->align(Fl_Align(FL_ALIGN_CENTER));
        Metro_Label->when(FL_WHEN_NEVER);
      } // RKR_Box* Metro_Label
      Metro->end();
    } // Fl_Group* Metro
    { Presets = new Fl_Group(168, 24, 352, 170);
      Presets->box(FL_UP_BOX);
      Presets->color(FL_FOREGROUND_COLOR);
      Presets->selection_color(FL_FOREGROUND_COLOR);
      Presets->user_data((void*)(1));
      Presets->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { PRESETS_LABEL = new RKR_Box(174, 28, 62, 14, "Presets");
        PRESETS_LABEL->box(FL_NO_BOX);
        PRESETS_LABEL->color(FL_BACKGROUND_COLOR);
        PRESETS_LABEL->selection_color(FL_BACKGROUND_COLOR);
        PRESETS_LABEL->labeltype(FL_NORMAL_LABEL);
        PRESETS_LABEL->labelfont(1);
        PRESETS_LABEL->labelsize(14);
        PRESETS_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        PRESETS_LABEL->user_data((void*)(7));
        PRESETS_LABEL->align(Fl_Align(FL_ALIGN_CENTER));
        PRESETS_LABEL->when(FL_WHEN_RELEASE);
      } // RKR_Box* PRESETS_LABEL
      { L_B1 = new RKR_Button(418, 30, 22, 16, "1");
        L_B1->box(FL_UP_BOX);
        L_B1->color((Fl_Color)62);
        L_B1->selection_color(FL_BACKGROUND_COLOR);
        L_B1->labeltype(FL_NORMAL_LABEL);
        L_B1->labelfont(0);
        L_B1->labelsize(10);
        L_B1->labelcolor(FL_FOREGROUND_COLOR);
        L_B1->callback((Fl_Callback*)cb_L_B1, (void*)(77));
        L_B1->align(Fl_Align(FL_ALIGN_CENTER));
        L_B1->when(FL_WHEN_RELEASE);
      } // RKR_Button* L_B1
      { L_B2 = new RKR_Button(442, 30, 22, 16, "2");
        L_B2->box(FL_UP_BOX);
        L_B2->color((Fl_Color)62);
        L_B2->selection_color(FL_BACKGROUND_COLOR);
        L_B2->labeltype(FL_NORMAL_LABEL);
        L_B2->labelfont(0);
        L_B2->labelsize(10);
        L_B2->labelcolor(FL_FOREGROUND_COLOR);
        L_B2->callback((Fl_Callback*)cb_L_B2, (void*)(77));
        L_B2->align(Fl_Align(FL_ALIGN_CENTER));
        L_B2->when(FL_WHEN_RELEASE);
      } // RKR_Button* L_B2
      { L_B3 = new RKR_Button(466, 30, 22, 16, "3");
        L_B3->box(FL_UP_BOX);
        L_B3->color((Fl_Color)62);
        L_B3->selection_color(FL_BACKGROUND_COLOR);
        L_B3->labeltype(FL_NORMAL_LABEL);
        L_B3->labelfont(0);
        L_B3->labelsize(10);
        L_B3->labelcolor(FL_FOREGROUND_COLOR);
        L_B3->callback((Fl_Callback*)cb_L_B3, (void*)(77));
        L_B3->align(Fl_Align(FL_ALIGN_CENTER));
        L_B3->when(FL_WHEN_RELEASE);
      } // RKR_Button* L_B3
      { L_B4 = new RKR_Button(490, 30, 22, 16, "U");
        L_B4->box(FL_UP_BOX);
        L_B4->color((Fl_Color)62);
        L_B4->selection_color(FL_BACKGROUND_COLOR);
        L_B4->labeltype(FL_NORMAL_LABEL);
        L_B4->labelfont(0);
        L_B4->labelsize(10);
        L_B4->labelcolor(FL_FOREGROUND_COLOR);
        L_B4->callback((Fl_Callback*)cb_L_B4, (void*)(77));
        L_B4->align(Fl_Align(FL_ALIGN_CENTER));
        L_B4->when(FL_WHEN_RELEASE);
      } // RKR_Button* L_B4
      { RKR_Button* o = S_new = new RKR_Button(174, 50, 64, 18, "New");
        S_new->tooltip("New preset - Shortcut \'N\'");
        S_new->box(FL_UP_BOX);
        S_new->shortcut(0x6e);
        S_new->color((Fl_Color)62);
        S_new->selection_color(FL_BACKGROUND_COLOR);
        S_new->labeltype(FL_NORMAL_LABEL);
        S_new->labelfont(0);
        S_new->labelsize(12);
        S_new->labelcolor(FL_FOREGROUND_COLOR);
        S_new->callback((Fl_Callback*)cb_S_new, (void*)(77));
        S_new->align(Fl_Align(FL_ALIGN_CENTER));
        S_new->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Button* S_new
      { RKR_Button* o = L_preset = new RKR_Button(240, 50, 64, 18, "Load");
        L_preset->tooltip("Open load preset window - Shortcut \'L\'");
        L_preset->box(FL_UP_BOX);
        L_preset->shortcut(0x6c);
        L_preset->color((Fl_Color)62);
        L_preset->selection_color(FL_BACKGROUND_COLOR);
        L_preset->labeltype(FL_NORMAL_LABEL);
        L_preset->labelfont(0);
        L_preset->labelsize(12);
        L_preset->labelcolor(FL_FOREGROUND_COLOR);
        L_preset->callback((Fl_Callback*)cb_L_preset, (void*)(77));
        L_preset->align(Fl_Align(FL_ALIGN_CENTER));
        L_preset->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Button* L_preset
      { RKR_Button* o = S_preset = new RKR_Button(306, 50, 64, 18, "Save");
        S_preset->tooltip("Open save preset window - Shortcut \'S\'");
        S_preset->box(FL_UP_BOX);
        S_preset->shortcut(0x73);
        S_preset->color((Fl_Color)62);
        S_preset->selection_color(FL_BACKGROUND_COLOR);
        S_preset->labeltype(FL_NORMAL_LABEL);
        S_preset->labelfont(0);
        S_preset->labelsize(12);
        S_preset->labelcolor(FL_FOREGROUND_COLOR);
        S_preset->callback((Fl_Callback*)cb_S_preset, (void*)(77));
        S_preset->align(Fl_Align(FL_ALIGN_CENTER));
        S_preset->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Button* S_preset
      { RKR_Light_Button* o = Compare = new RKR_Light_Button(373, 50, 72, 18, "Compare");
        Compare->tooltip("Compare to bank preset - Shortcut \'P\'");
        Compare->box(FL_UP_BOX);
        Compare->shortcut(0x70);
        Compare->color((Fl_Color)62);
        Compare->selection_color((Fl_Color)1);
        Compare->labeltype(FL_NORMAL_LABEL);
        Compare->labelfont(0);
        Compare->labelsize(12);
        Compare->labelcolor(FL_FOREGROUND_COLOR);
        Compare->callback((Fl_Callback*)cb_Compare, (void*)(7));
        Compare->align(Fl_Align(68|FL_ALIGN_INSIDE));
        Compare->when(FL_WHEN_CHANGED);
        o->set_label_offset(2);
      } // RKR_Light_Button* Compare
      { RKR_Button* o = B_preset = new RKR_Button(448, 50, 64, 18, "Bank");
        B_preset->tooltip("Open bank window - Shortcut \'B\'");
        B_preset->box(FL_UP_BOX);
        B_preset->shortcut(0x62);
        B_preset->color((Fl_Color)62);
        B_preset->selection_color(FL_BACKGROUND_COLOR);
        B_preset->labeltype(FL_NORMAL_LABEL);
        B_preset->labelfont(0);
        B_preset->labelsize(12);
        B_preset->labelcolor(FL_FOREGROUND_COLOR);
        B_preset->callback((Fl_Callback*)cb_B_preset, (void*)(77));
        B_preset->align(Fl_Align(FL_ALIGN_CENTER));
        B_preset->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Button* B_preset
      { RKR_Input* o = WPreset_Name = new RKR_Input(174, 72, 338, 30);
        WPreset_Name->box(FL_DOWN_BOX);
        WPreset_Name->color((Fl_Color)62);
        WPreset_Name->selection_color(FL_SELECTION_COLOR);
        WPreset_Name->labeltype(FL_NORMAL_LABEL);
        WPreset_Name->labelfont(0);
        WPreset_Name->labelsize(14);
        WPreset_Name->labelcolor(FL_BACKGROUND2_COLOR);
        WPreset_Name->textsize(24);
        WPreset_Name->textcolor(FL_BACKGROUND2_COLOR);
        WPreset_Name->callback((Fl_Callback*)cb_WPreset_Name);
        WPreset_Name->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        WPreset_Name->when(FL_WHEN_RELEASE);
        o->set_text_offset(14);
        o->maximum_size(22);
      } // RKR_Input* WPreset_Name
      { RKR_Counter* o = Preset_Counter = new RKR_Counter(174, 106, 60, 20, "Preset");
        Preset_Counter->tooltip("Next or previous preset - Shortcut +(plus) or -(minus)");
        Preset_Counter->type(1);
        Preset_Counter->box(FL_UP_BOX);
        Preset_Counter->color((Fl_Color)62);
        Preset_Counter->selection_color(FL_FOREGROUND_COLOR);
        Preset_Counter->labeltype(FL_NORMAL_LABEL);
        Preset_Counter->labelfont(0);
        Preset_Counter->labelsize(11);
        Preset_Counter->labelcolor(FL_BACKGROUND2_COLOR);
        Preset_Counter->minimum(1);
        Preset_Counter->maximum(60);
        Preset_Counter->step(1);
        Preset_Counter->value(1);
        Preset_Counter->textsize(11);
        Preset_Counter->callback((Fl_Callback*)cb_Preset_Counter);
        Preset_Counter->align(Fl_Align(FL_ALIGN_BOTTOM));
        Preset_Counter->when(FL_WHEN_CHANGED);
        o->set_label_offset(1);
        o->set_text_offset(1);
      } // RKR_Counter* Preset_Counter
      { DAuthor = new RKR_Box(246, 107, 266, 18);
        DAuthor->box(FL_DOWN_BOX);
        DAuthor->color((Fl_Color)62);
        DAuthor->selection_color(FL_BACKGROUND_COLOR);
        DAuthor->labeltype(FL_NORMAL_LABEL);
        DAuthor->labelfont(0);
        DAuthor->labelsize(14);
        DAuthor->labelcolor(FL_FOREGROUND_COLOR);
        DAuthor->user_data((void*)(7));
        DAuthor->align(Fl_Align(100|FL_ALIGN_INSIDE));
        DAuthor->when(FL_WHEN_RELEASE);
      } // RKR_Box* DAuthor
      { RandomP = new RKR_Button(175, 141, 59, 14, "Random");
        RandomP->tooltip("Random Preset selection - Shortcut \'F7\'");
        RandomP->box(FL_UP_BOX);
        RandomP->shortcut(0xffc4);
        RandomP->color((Fl_Color)62);
        RandomP->selection_color(FL_BACKGROUND_COLOR);
        RandomP->labeltype(FL_NORMAL_LABEL);
        RandomP->labelfont(0);
        RandomP->labelsize(10);
        RandomP->labelcolor(FL_FOREGROUND_COLOR);
        RandomP->callback((Fl_Callback*)cb_RandomP, (void*)(77));
        RandomP->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        RandomP->when(FL_WHEN_RELEASE_ALWAYS);
      } // RKR_Button* RandomP
      { RKR_Button* o = Open_Order = new RKR_Button(247, 132, 195, 24, "Put Order in your Rack");
        Open_Order->tooltip("Open preset order window - Shortcut \'O\'");
        Open_Order->box(FL_UP_BOX);
        Open_Order->shortcut(0x6f);
        Open_Order->color((Fl_Color)62);
        Open_Order->selection_color(FL_BACKGROUND_COLOR);
        Open_Order->labeltype(FL_NORMAL_LABEL);
        Open_Order->labelfont(0);
        Open_Order->labelsize(14);
        Open_Order->labelcolor(FL_FOREGROUND_COLOR);
        Open_Order->callback((Fl_Callback*)cb_Open_Order, (void*)(77));
        Open_Order->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        Open_Order->when(FL_WHEN_RELEASE_ALWAYS);
        o->set_label_offset(4);
      } // RKR_Button* Open_Order
      { RKR_Button* o = Etit = new RKR_Button(174, 160, 340, 28, "Rakarrack +");
        Etit->tooltip("Click here to toggle analyzer ON/OFF");
        Etit->type(1);
        Etit->box(FL_NO_BOX);
        Etit->color((Fl_Color)2);
        Etit->selection_color(FL_BACKGROUND_COLOR);
        Etit->labeltype(FL_EMBOSSED_LABEL);
        Etit->labelfont(1);
        Etit->labelsize(21);
        Etit->labelcolor((Fl_Color)1);
        Etit->callback((Fl_Callback*)cb_Etit);
        Etit->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        Etit->when(FL_WHEN_RELEASE);
        o->set_label_offset(15);
      } // RKR_Button* Etit
      { Analy = new Analyzer(174, 160, 340, 28);
        Analy->tooltip("Click here to toggle analyzer ON/OFF");
        Analy->box(FL_NO_BOX);
        Analy->color(FL_BACKGROUND_COLOR);
        Analy->selection_color(FL_BACKGROUND_COLOR);
        Analy->labeltype(FL_EMBOSSED_LABEL);
        Analy->labelfont(1);
        Analy->labelsize(22);
        Analy->labelcolor(FL_FOREGROUND_COLOR);
        Analy->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        Analy->when(FL_WHEN_RELEASE);
        Analy->hide();
      } // Analyzer* Analy
      { HideUE = new RKR_Button(445, 137, 32, 18, "Hide");
        HideUE->tooltip("Hide/Show unused Effects - Shortcut \'F9\'");
        HideUE->box(FL_UP_BOX);
        HideUE->shortcut(0xffc6);
        HideUE->color((Fl_Color)62);
        HideUE->selection_color(FL_BACKGROUND_COLOR);
        HideUE->labeltype(FL_NORMAL_LABEL);
        HideUE->labelfont(0);
        HideUE->labelsize(10);
        HideUE->labelcolor(FL_FOREGROUND_COLOR);
        HideUE->callback((Fl_Callback*)cb_HideUE, (void*)(77));
        HideUE->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        HideUE->when(FL_WHEN_RELEASE_ALWAYS);
      } // RKR_Button* HideUE
      { SwitchMod = new RKR_Button(480, 137, 32, 18, "Sw");
        SwitchMod->tooltip("Switch between Midi Converter &\nMetronome - Shortcut \'F8\'");
        SwitchMod->box(FL_UP_BOX);
        SwitchMod->shortcut(0xffc5);
        SwitchMod->color((Fl_Color)62);
        SwitchMod->selection_color(FL_BACKGROUND_COLOR);
        SwitchMod->labeltype(FL_NORMAL_LABEL);
        SwitchMod->labelfont(0);
        SwitchMod->labelsize(10);
        SwitchMod->labelcolor(FL_FOREGROUND_COLOR);
        SwitchMod->callback((Fl_Callback*)cb_SwitchMod, (void*)(77));
        SwitchMod->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        SwitchMod->when(FL_WHEN_RELEASE_ALWAYS);
      } // RKR_Button* SwitchMod
      Presets->end();
    } // Fl_Group* Presets
    { Tap = new Fl_Group(520, 140, 276, 54);
      Tap->box(FL_UP_BOX);
      Tap->color(FL_FOREGROUND_COLOR);
      Tap->selection_color(FL_FOREGROUND_COLOR);
      Tap->user_data((void*)(1));
      Tap->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { Tap_activar = new RKR_Light_Button(525, 144, 38, 18, "On");
        Tap_activar->tooltip("Enable Tap Tempo - Shortcut \'H\'");
        Tap_activar->box(FL_UP_BOX);
        Tap_activar->shortcut(0x68);
        Tap_activar->color((Fl_Color)62);
        Tap_activar->selection_color((Fl_Color)1);
        Tap_activar->labeltype(FL_NORMAL_LABEL);
        Tap_activar->labelfont(0);
        Tap_activar->labelsize(10);
        Tap_activar->labelcolor(FL_FOREGROUND_COLOR);
        Tap_activar->callback((Fl_Callback*)cb_Tap_activar, (void*)(2));
        Tap_activar->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Tap_activar->when(FL_WHEN_CHANGED);
      } // RKR_Light_Button* Tap_activar
      { RKR_Choice* o = T_SEL = new RKR_Choice(600, 145, 87, 15, "Input");
        T_SEL->box(FL_FLAT_BOX);
        T_SEL->down_box(FL_BORDER_BOX);
        T_SEL->color(FL_BACKGROUND_COLOR);
        T_SEL->selection_color(FL_SELECTION_COLOR);
        T_SEL->labeltype(FL_NORMAL_LABEL);
        T_SEL->labelfont(0);
        T_SEL->labelsize(10);
        T_SEL->labelcolor(FL_BACKGROUND2_COLOR);
        T_SEL->textsize(10);
        T_SEL->textcolor(FL_BACKGROUND2_COLOR);
        T_SEL->callback((Fl_Callback*)cb_T_SEL, (void*)(12));
        T_SEL->align(Fl_Align(FL_ALIGN_LEFT));
        T_SEL->when(FL_WHEN_RELEASE);
        T_SEL->menu(menu_T_SEL);
        o->set_text_offset(-1);
      } // RKR_Choice* T_SEL
      { RKR_Choice* o = T_SET = new RKR_Choice(714, 145, 76, 15, "Set");
        T_SET->box(FL_FLAT_BOX);
        T_SET->down_box(FL_BORDER_BOX);
        T_SET->color(FL_BACKGROUND_COLOR);
        T_SET->selection_color(FL_SELECTION_COLOR);
        T_SET->labeltype(FL_NORMAL_LABEL);
        T_SET->labelfont(0);
        T_SET->labelsize(10);
        T_SET->labelcolor(FL_BACKGROUND2_COLOR);
        T_SET->textsize(10);
        T_SET->textcolor(FL_BACKGROUND2_COLOR);
        T_SET->callback((Fl_Callback*)cb_T_SET, (void*)(12));
        T_SET->align(Fl_Align(FL_ALIGN_LEFT));
        T_SET->when(FL_WHEN_RELEASE);
        T_SET->menu(menu_T_SET);
        o->set_text_offset(-1);
      } // RKR_Choice* T_SET
      { T_Apply = new RKR_Button(628, 172, 38, 15, "Apply");
        T_Apply->box(FL_UP_BOX);
        T_Apply->shortcut(0x67);
        T_Apply->color(FL_BACKGROUND_COLOR);
        T_Apply->selection_color(FL_BACKGROUND_COLOR);
        T_Apply->labeltype(FL_NORMAL_LABEL);
        T_Apply->labelfont(0);
        T_Apply->labelsize(10);
        T_Apply->labelcolor(FL_FOREGROUND_COLOR);
        T_Apply->callback((Fl_Callback*)cb_T_Apply, (void*)(77));
        T_Apply->align(Fl_Align(FL_ALIGN_CENTER));
        T_Apply->when(FL_WHEN_RELEASE);
      } // RKR_Button* T_Apply
      { RKR_Button* o = T_BUT = new RKR_Button(671, 165, 38, 23, "Tap");
        T_BUT->tooltip("Tap tempo set - Shortcut \'G\'");
        T_BUT->box(FL_UP_BOX);
        T_BUT->shortcut(0x67);
        T_BUT->color(FL_BACKGROUND_COLOR);
        T_BUT->selection_color(FL_BACKGROUND_COLOR);
        T_BUT->labeltype(FL_NORMAL_LABEL);
        T_BUT->labelfont(0);
        T_BUT->labelsize(12);
        T_BUT->labelcolor(FL_FOREGROUND_COLOR);
        T_BUT->callback((Fl_Callback*)cb_T_BUT, (void*)(77));
        T_BUT->align(Fl_Align(FL_ALIGN_CENTER));
        T_BUT->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Button* T_BUT
      { TAP_LABEL = new RKR_Box(524, 170, 93, 14, "Tap Tempo");
        TAP_LABEL->box(FL_NO_BOX);
        TAP_LABEL->color(FL_BACKGROUND_COLOR);
        TAP_LABEL->selection_color(FL_BACKGROUND_COLOR);
        TAP_LABEL->labeltype(FL_NORMAL_LABEL);
        TAP_LABEL->labelfont(1);
        TAP_LABEL->labelsize(14);
        TAP_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        TAP_LABEL->user_data((void*)(7));
        TAP_LABEL->align(Fl_Align(FL_ALIGN_CENTER));
        TAP_LABEL->when(FL_WHEN_NEVER);
      } // RKR_Box* TAP_LABEL
      { RKR_Value_Input* o = T_DIS = new RKR_Value_Input(719, 165, 70, 22);
        T_DIS->box(FL_DOWN_BOX);
        T_DIS->color(FL_BACKGROUND2_COLOR);
        T_DIS->selection_color(FL_SELECTION_COLOR);
        T_DIS->labeltype(FL_NORMAL_LABEL);
        T_DIS->labelfont(0);
        T_DIS->labelsize(14);
        T_DIS->labelcolor(FL_FOREGROUND_COLOR);
        T_DIS->minimum(20);
        T_DIS->maximum(360);
        T_DIS->step(1);
        T_DIS->value(100);
        T_DIS->textcolor(FL_BACKGROUND2_COLOR);
        T_DIS->callback((Fl_Callback*)cb_T_DIS);
        T_DIS->align(Fl_Align(FL_ALIGN_CENTER));
        T_DIS->when(FL_WHEN_CHANGED);
        o->set_text_offset(4);
        o->set_label_offset(4);
      } // RKR_Value_Input* T_DIS
      Tap->end();
    } // Fl_Group* Tap
    Principal->size_range(320, 240, 3200, 2400);
    Principal->end();
    Principal->resizable(Principal);
  } // Fl_Double_Window* Principal
  { BankWindowGui* o = BankWindow = new BankWindowGui(800, 600);
    BankWindow->box(FL_NO_BOX);
    BankWindow->color((Fl_Color)4);
    BankWindow->selection_color(FL_BACKGROUND2_COLOR);
    BankWindow->labeltype(FL_NO_LABEL);
    BankWindow->labelfont(0);
    BankWindow->labelsize(14);
    BankWindow->labelcolor(FL_FOREGROUND_COLOR);
    BankWindow->callback((Fl_Callback*)cb_BankWindow2, (void*)(this));
    BankWindow->align(Fl_Align(FL_ALIGN_TOP));
    BankWindow->when(FL_WHEN_RELEASE);
    o->initialize(rkr, this);
    o->hide();
    BankWindow->size_range(320, 240, 3200, 2400);
    BankWindow->end();
    BankWindow->resizable(BankWindow);
  } // BankWindowGui* BankWindow
  { OrderWindowGui* o = Order = new OrderWindowGui(500, 400);
    Order->box(FL_NO_BOX);
    Order->color((Fl_Color)4);
    Order->selection_color(FL_BACKGROUND2_COLOR);
    Order->labeltype(FL_NO_LABEL);
    Order->labelfont(0);
    Order->labelsize(14);
    Order->labelcolor(FL_FOREGROUND_COLOR);
    Order->callback((Fl_Callback*)cb_Order, (void*)(this));
    Order->align(Fl_Align(FL_ALIGN_TOP));
    Order->when(FL_WHEN_RELEASE);
    o->initialize(rkr, this);
    o->hide();
    Order->size_range(250, 200, 3200, 2400);
    Order->end();
    Order->resizable(Order);
  } // OrderWindowGui* Order
  { SettingsWindowGui* o = Settings = new SettingsWindowGui(530, 580);
    Settings->box(FL_NO_BOX);
    Settings->color((Fl_Color)4);
    Settings->selection_color(FL_BACKGROUND2_COLOR);
    Settings->labeltype(FL_NO_LABEL);
    Settings->labelfont(0);
    Settings->labelsize(14);
    Settings->labelcolor(FL_FOREGROUND_COLOR);
    Settings->callback((Fl_Callback*)cb_Settings, (void*)(this));
    Settings->align(Fl_Align(FL_ALIGN_TOP));
    Settings->when(FL_WHEN_RELEASE);
    o->initialize(rkr, this);
    o->hide();
    Settings->size_range(320, 290, 3200, 2900);
    Settings->end();
    Settings->resizable(Settings);
  } // SettingsWindowGui* Settings
  { MidiLearnWindowGui* o = MIDILearn = new MidiLearnWindowGui(640, 480);
    MIDILearn->box(FL_NO_BOX);
    MIDILearn->color((Fl_Color)4);
    MIDILearn->selection_color(FL_BACKGROUND2_COLOR);
    MIDILearn->labeltype(FL_NO_LABEL);
    MIDILearn->labelfont(0);
    MIDILearn->labelsize(14);
    MIDILearn->labelcolor(FL_FOREGROUND_COLOR);
    MIDILearn->callback((Fl_Callback*)cb_MIDILearn, (void*)(this));
    MIDILearn->align(Fl_Align(FL_ALIGN_TOP));
    MIDILearn->when(FL_WHEN_RELEASE);
    o->initialize(rkr, this);
    o->hide();
    MIDILearn->size_range(320, 240, 3200, 2400);
    MIDILearn->end();
  } // MidiLearnWindowGui* MIDILearn
  { AboutWindowGui* o = AboutWin = new AboutWindowGui(375, 280, "About Rakarrack-plus");
    AboutWin->box(FL_FLAT_BOX);
    AboutWin->color(FL_INACTIVE_COLOR);
    AboutWin->selection_color(FL_BACKGROUND2_COLOR);
    AboutWin->labeltype(FL_NO_LABEL);
    AboutWin->labelfont(0);
    AboutWin->labelsize(14);
    AboutWin->labelcolor(FL_FOREGROUND_COLOR);
    AboutWin->callback((Fl_Callback*)cb_AboutWin, (void*)(this));
    AboutWin->align(Fl_Align(FL_ALIGN_TOP));
    AboutWin->when(FL_WHEN_RELEASE);
    o->initialize(this);
    o->hide();
    AboutWin->end();
  } // AboutWindowGui* AboutWin
  { TrigWindowGui* o = Trigger = new TrigWindowGui(205, 165);
    Trigger->box(FL_NO_BOX);
    Trigger->color((Fl_Color)4);
    Trigger->selection_color(FL_BACKGROUND2_COLOR);
    Trigger->labeltype(FL_NO_LABEL);
    Trigger->labelfont(0);
    Trigger->labelsize(14);
    Trigger->labelcolor(FL_FOREGROUND_COLOR);
    Trigger->callback((Fl_Callback*)cb_Trigger, (void*)(this));
    Trigger->align(Fl_Align(FL_ALIGN_TOP));
    Trigger->when(FL_WHEN_RELEASE);
    o->initialize(rkr);
    o->hide();
    Trigger->end();
  } // TrigWindowGui* Trigger
  { DelayFileWindowGui* o = DelayFile = new DelayFileWindowGui(800, 265, "Delay File");
    DelayFile->box(FL_FLAT_BOX);
    DelayFile->color(FL_BACKGROUND_COLOR);
    DelayFile->selection_color(FL_BACKGROUND_COLOR);
    DelayFile->labeltype(FL_NO_LABEL);
    DelayFile->labelfont(0);
    DelayFile->labelsize(14);
    DelayFile->labelcolor(FL_FOREGROUND_COLOR);
    DelayFile->user_data((void*)(this));
    DelayFile->align(Fl_Align(FL_ALIGN_TOP));
    DelayFile->when(FL_WHEN_RELEASE);
    o->hide();
    o->initialize(rkr, this);
    DelayFile->end();
  } // DelayFileWindowGui* DelayFile
  char tmp[64];
  sprintf(tmp,"Version %s",VERSION);
  AboutWin->About_Version->copy_label(tmp);
}
