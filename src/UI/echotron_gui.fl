# data file for the Fltk User Interface Designer (fluid)
version 1.0305
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} EchotronGui {
  user_data 1 open
  xywh {1576 112 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button echotron_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Echotron_Bypass);
 return;
}
rkr->Echotron_Bypass=(int)o->value();
if((int) o->value()==0) rkr->efx_Echotron->cleanup();
rgui->findpos(41,(int)o->value(),o);}
    xywh {6 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice echotron_preset {
    label Preset
    user_data 12041
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12041))rkr->efx_Echotron->setpreset((int) o->value());
echotron_pan->value(rkr->efx_Echotron->getpar(11)-64);
echotron_WD->value(Dry_Wet(rkr->efx_Echotron->getpar(0)));
echotron_damp->value(rkr->efx_Echotron->getpar(6));
echotron_fnum->value(rkr->efx_Echotron->getpar(8));
echotron_user->value(rkr->efx_Echotron->getpar(4));
echotron_user->do_callback();
echotron_fb->value(rkr->efx_Echotron->getpar(10));
echotron_tempo->value(rkr->efx_Echotron->getpar(5));
echotron_lfotype->value(rkr->efx_Echotron->getpar(14));
echotron_width->value(rkr->efx_Echotron->getpar(2));
echotron_deep->value(rkr->efx_Echotron->getpar(1)-64);
echotron_lrcross->value(rkr->efx_Echotron->getpar(7)-64);
echotron_stdf->value(rkr->efx_Echotron->getpar(9));
echotron_af->value(rkr->efx_Echotron->getpar(15));
echotron_mf->value(rkr->efx_Echotron->getpar(13));
echotron_md->value(rkr->efx_Echotron->getpar(12));
echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);}
    xywh {79 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Summer
      xywh {87 87 36 21} labelsize 10
    }
    MenuItem {} {
      label Ambience
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Arranjer
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Suction
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label SuctionFlange
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label Soft
      xywh {97 97 36 21} labelsize 10
    }
  }
  Fl_Value_Slider echotron_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(348);
 return;
}
rkr->efx_Echotron->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(349);
 return;
}
rkr->efx_Echotron->changepar(11,(int)(o->value()+64));}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_tempo {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(350);
 return;
}
rkr->efx_Echotron->changepar(5,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 600 step 1 value 60 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_damp {
    label Damp
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(351);
 return;
}
rkr->efx_Echotron->changepar(6,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(352);
 return;
}
rkr->efx_Echotron->changepar(10,(int)o->value());}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_lrcross {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(353);
 return;
}
rkr->efx_Echotron->changepar(7,(int)(o->value()+64));}
    xywh {56 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_width {
    label Width
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(354);
 return;
}
rkr->efx_Echotron->changepar(2,(int)o->value());}
    xywh {56 97 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_deep {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(355);
 return;
}
rkr->efx_Echotron->changepar(1,((int)o->value()+64));}
    xywh {56 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(356);
 return;
}
rkr->efx_Echotron->changepar(9,(int)o->value());}
    xywh {56 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button echotron_af {
    label AF
    user_data 2
    callback {rkr->efx_Echotron->changepar(15,(int)o->value());}
    xywh {2 136 32 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Choice echotron_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(461);
 return;
}

rkr->efx_Echotron->changepar(14,(int)o->value());} open
    xywh {88 135 64 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Check_Button echotron_mf {
    label MF
    user_data 2
    callback {rkr->efx_Echotron->changepar(13,(int)o->value());}
    xywh {2 151 33 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button echotron_md {
    label MD
    user_data 2
    callback {rkr->efx_Echotron->changepar(12,(int)o->value());}
    xywh {33 151 34 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button echotron_user {
    label User
    user_data 2
    callback {rkr->efx_Echotron->changepar(4,(int)o->value());

if((int)o->value())B_ech->activate(); else B_ech->deactivate();}
    xywh {67 154 39 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Button B_ech {
    label Browse
    user_data 2
    callback {if(Fl::event_button()==3)
{
    if(!rgui->DelayFile->visible())
    {
        rgui->DelayFile->apply_button->activate();
        rgui->DelayFile->show();
        rgui->put_icon(rgui->DelayFile);
    }
    else
    {
        rgui->DelayFile->hide();
    }
    return;
}

char *filename;
filename=fl_file_chooser("Load dly File:","(*.dly)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".dly");
strcpy(rkr->efx_Echotron->Filename,filename);

if(!rkr->efx_Echotron->setfile(USERFILE))
{
    fl_alert("Error loading %s file!\\n", filename);
}

echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);} selected
    xywh {106 156 46 10} labelsize 10 deactivate
    class RKR_Button
  }
  Fl_Counter echotron_length {
    label {\#}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(357);
 return;
}
rkr->efx_Echotron->changepar(3,(int)o->value());}
    xywh {16 167 48 12} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 127 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Choice echotron_fnum {
    label File
    user_data 12
    callback {rkr->efx_Echotron->changepar(8,(int)o->value());
echotron_length->value(rkr->efx_Echotron->getpar(3));
echotron_length->maximum(rkr->efx_Echotron->File.fLength);}
    xywh {88 168 64 14} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label SwingPong
      xywh {64 64 36 21} labelsize 10
    }
    MenuItem {} {
      label {Short Delays}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Flange + Echo}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Comb
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label EchoFlange
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Filtered Echo}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Notch-Wah}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Multi-Chorus}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label PingPong
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label {90-Shifter}
      xywh {30 30 36 21} labelsize 10
    }
    MenuItem {} {
      label {Basic LR Delay}
      xywh {40 40 36 21} labelsize 10
    }
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
